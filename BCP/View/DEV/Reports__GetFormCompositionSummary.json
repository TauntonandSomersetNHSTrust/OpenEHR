{"name":"Reports::GetFormCompositionSummary","category":"view","description":"Return composition summary for all supplied template IDs","metaData":"{\r\n    \"parameters\": [\r\n        {\r\n            \"name\": \"templates\",\r\n            \"description\": \"\",\r\n            \"type\": \"string\"\r\n        },\r\n        {\r\n            \"name\": \"fromDate\",\r\n            \"description\": \"\",\r\n            \"type\": \"string\"\r\n        },\r\n        {\r\n            \"name\": \"toDate\",\r\n            \"description\": \"\",\r\n            \"type\": \"string\"\r\n        }\r\n    ]\r\n}","steps":[{"processorName":"js","processorData":"function generateAql(templates, fromDate, toDate) {\r\n    return \"SELECT c/name/value as title, \\n\" +\r\n        \"   c/uid/value as uid, \\n\" +\r\n\t\"   e/ehr_id/value as ehrid, \\n\" +\r\n\t\"\tn/items[at0002]/value/value as encounterID, \\n\" +\r\n        \"   c/context/start_time/value as dateCompositionContext, \\n\" +\r\n        \"   c/archetype_details/template_id/value as templateId, \\n\" +\r\n        \"   c/composer/name as creator, \\n\" +\r\n        \"   v/commit_audit/time_committed/value as dateCompositionSubmitted, \\n\" +\r\n        \"   tags(c) as tagData, \\n\" +\r\n        \"   vo/trunk_lifecycle_state/value as status, \\n\" +\r\n\t\"   v/commit_audit/description/value as comment \\n\" +\r\n        \"   FROM EHR e \\n\" +\r\n        \"   CONTAINS VERSIONED_OBJECT vo CONTAINS VERSION v[all_versions] \\n\" +\r\n        \"   CONTAINS COMPOSITION c \\n\" +\r\n\t\t\"\tCONTAINS CLUSTER n[openEHR-EHR-CLUSTER.encounter_context.v0] \\n\" +\r\n        \"   WHERE v/lifecycle_state matches {'complete'} \\n\" +\r\n        \"   AND templateId matches {\" + templates + \"} \\n\" +\r\n\t\t\"   AND dateCompositionSubmitted >=  '\" + fromDate +\"' \\n\" +\r\n\t\t\"   AND dateCompositionSubmitted <  '\" + toDate +\"' \\n\" +\r\n        \"   ORDER BY dateCompositionSubmitted DESC LIMIT 100000\";\r\n}\r\n\r\nfunction generateIncompleteCompositionsAql(templates, fromDate, toDate) {\r\n  return \"SELECT c/name/value as title, \\n\" +\r\n        \"   c/uid/value as uid, \\n\" +\r\n\t\"   e/ehr_id/value as ehrid, \\n\" +\r\n\t\"   n/items[at0002]/value/value as encounterID, \\n\" +\r\n        \"   c/context/start_time/value as dateCompositionContext, \\n\" +\r\n        \"   c/archetype_details/template_id/value as templateId, \\n\" +\r\n        \"   c/composer/name as creator, \\n\" +\r\n        \"   v/commit_audit/time_committed/value as dateCompositionSubmitted, \\n\" +\r\n        \"   tags(c) as tagData, \\n\" +\r\n        \"   vo/trunk_lifecycle_state/value as status, \\n\" +\r\n\t\"   v/commit_audit/description/value as comment \\n\" +\r\n        \"   FROM EHR e \\n\" +\r\n        \"   CONTAINS VERSIONED_OBJECT vo CONTAINS VERSION v[all_versions] \\n\" +\r\n        \"   CONTAINS COMPOSITION c \\n\" +\r\n\t\t\"\tCONTAINS CLUSTER n[openEHR-EHR-CLUSTER.encounter_context.v0] \\n\" +\r\n        \"   WHERE c TAGGED BY 'permanentlyIncomplete' \\n\" +\r\n        \"   AND v/lifecycle_state matches {'incomplete'} \\n\" +\r\n        \"   AND templateId matches {\" + templates + \"} \\n\" +\r\n\t\t\"   AND dateCompositionSubmitted >=  '\" + fromDate +\"' \\n\" +\r\n\t\t\"   AND dateCompositionSubmitted <  '\" + toDate +\"' \\n\" +\r\n        \"   ORDER BY dateCompositionSubmitted DESC LIMIT 100000\";  \r\n}\r\n\r\nfunction generateDeletedCompositionsAql(versionedCompositionIds) {\r\n    return  'SELECT vo/uid/value as versionedUid, ' +\r\n    '   v/lifecycle_state/value as status, ' +\r\n    '   v/commit_audit/description/value as comment, ' + \r\n    '   v/uid/value as uid, ' +\r\n    '   v/commit_audit/committer/name as creator, ' +\r\n    '   v/commit_audit/time_committed/value as createTime, ' +\r\n    '   v/lifecycle_state/value as lifecycleState ' +\r\n    '   FROM EHR e ' +\r\n    '   CONTAINS VERSIONED_OBJECT vo ' +\r\n    '   CONTAINS VERSION v[all_versions] ' +\r\n    '   WHERE v/uid/value matches { ' + versionedCompositionIds + '}';\r\n}\r\n\r\nfunction generateEhrQuery(ctx, templates) {\r\n    return Ehr.query({\r\n        aql: generateAql(templates, ctx.vars.fromDate, ctx.vars.toDate),\r\n        initvalue: [],\r\n        params: {\r\n        },\r\n        callback: function (out, result) {\r\n            out.push(result);\r\n        }\r\n    });\r\n}\r\n\r\nfunction generateIncompleteEhrQuery(ctx, templates) {\r\n    return Ehr.query({\r\n        aql: generateIncompleteCompositionsAql(templates, ctx.vars.fromDate, ctx.vars.toDate),\r\n        initvalue: [],\r\n        params: {            \r\n        },\r\n        callback: function (out, result) {\r\n            out.push(result);\r\n        }\r\n    });\r\n}\r\n\r\nfunction generateDeletedVersionsQuery(ctx, deletedDocuments) {\r\n    var deletedUids = '';\r\n    var deletedDocumentKeys = Object.keys(deletedDocuments);\r\n    if (!deletedDocumentKeys.length) {\r\n        return null;\r\n    }\r\n    for (var doc in deletedDocumentKeys) {\r\n        var uid = deletedDocuments[deletedDocumentKeys[doc]].uid.split('::');\r\n        uid[2] = +uid[2] + 1;\r\n        deletedUids += \"'\" + uid.join('::') + \"'\";\r\n        if (doc < deletedDocumentKeys.length - 1) {\r\n            deletedUids += ',';\r\n        }\r\n    }\r\n    return [Ehr.query({\r\n        aql: generateDeletedCompositionsAql(deletedUids),\r\n        initvalue: [],\r\n        params: {\r\n            ehrId: ctx.vars.ehrId,\r\n        },\r\n        callback: function (out, result) {\r\n            out.push(result);\r\n        }\r\n    })];\r\n}\r\n\r\n// Filters versions of compositions and only returns the latest version for each compositionUid\r\nfunction extractLatestVersions(compositions) {\r\n    var latestVersions = {};\r\n    var latestCompositions = [];\r\n    for (var c in compositions) {\r\n        var composition = compositions[c];\r\n        var uidElements = composition.uid.split('::');\r\n        var uid = uidElements[0];\r\n        var version = uidElements[2];\r\n        composition.version = +version;\r\n        var compositionDataToCompare = latestVersions[uid];\r\n        if (!compositionDataToCompare) {\r\n            latestVersions[uid] = composition;\r\n        } else if (compositionDataToCompare.version < composition.version) {\r\n            latestVersions[uid] = composition;\r\n        }\r\n    }\r\n    for (var i in Object.keys(latestVersions)) {\r\n        latestCompositions.push(latestVersions[Object.keys(latestVersions)[i]]);\r\n    }\r\n    return latestCompositions;\r\n}\r\n\r\nfunction compute(ctx, src) {\r\n    var templates;\r\n    var searchTerms = '';\r\n    var templatesString = '';\r\n\r\n    if (ctx.vars.templates) {\r\n        templates = ctx.vars.templates;\r\n        templates = templates.split(',');\r\n        for(var t in templates) {\r\n            templatesString = templatesString + '\"' + templates[t] + '\"';\r\n            if (t < templates.length - 1) {\r\n                templatesString = templatesString + ',';\r\n            }\r\n        }\r\n    }\r\n\r\n    var documents = [];\r\n    var promises = {};\r\n\r\n    promises = {\r\n        complete: generateEhrQuery(ctx, templatesString),\r\n        incomplete: generateIncompleteEhrQuery(ctx, templatesString)\r\n    };\r\n\r\n    Ehr.allhash(promises, function (res) {\r\n        documents = res;\r\n    });\r\n\r\n    var completeDocuments = extractLatestVersions(documents.complete);\r\n    var incompleteDocuments = documents.incomplete;\r\n\r\n    for (var i in incompleteDocuments) {\r\n        incompleteDocuments[i].type = 'draft';\r\n    }\r\n    for (var i in completeDocuments) {\r\n        completeDocuments[i].type = 'composition';\r\n    }\r\n\r\n    // Pop deleted documents into separate object with uid keys\r\n\r\n    var deletedDocuments = {};\r\n    for (var doc = 0; doc < completeDocuments.length; doc++) {\r\n        if (completeDocuments[doc].status === 'deleted') {\r\n            var deletedUid = completeDocuments[doc].uid.split('::')[0];\r\n            deletedDocuments[deletedUid] = completeDocuments[doc];\r\n            completeDocuments.splice(doc, 1);\r\n        }\r\n    }\r\n\r\n    var deletedVersionsPromise = generateDeletedVersionsQuery(ctx, deletedDocuments);\r\n    if (deletedVersionsPromise) {\r\n    // Loads latest versions for deleted compositions and modifies previous deleted documents\r\n    Ehr.allhash(deletedVersionsPromise, function(res) {\r\n        for (var r in res[0]) {\r\n            var document = res[0][r];\r\n            var documentUid = document.uid.split('::')[0];\r\n            deletedDocuments[documentUid].creator = document.creator;\r\n            deletedDocuments[documentUid].createTime = document.createTime;\r\n            deletedDocuments[documentUid].comment = document.comment;\r\n        }\r\n        });\r\n    }\r\n    // Re-merge deleted documents from object to original array\r\n    var deletedDocumentKeys = Object.keys(deletedDocuments);\r\n    for (var document in deletedDocumentKeys) {\r\n        completeDocuments.push(deletedDocuments[deletedDocumentKeys[document]]);\r\n    }\r\n    return completeDocuments.concat(incompleteDocuments);\r\n}\r\n"}]}