{"name":"BCP::AcuteTakeTrackerAll","category":"view","description":"As BCP::AcuteTakeTracker but does not accept an ehrID parameter as it returns the latest data for all patients who have had ATT done (01-03-2021)","metaData":"{\r\n    \"parameters\": [\r\n        {\r\n            \"name\": \"last_x_days\",\r\n            \"description\": \"The last X days of forms to pull, or 90 if null\",\r\n            \"type\": \"string\"\r\n        }\r\n    ]\r\n}","steps":[{"processorName":"js","processorData":"//1.0.0 - 25-02-2021 - Haydn Williams - First draft based on existing BCP::AcuteTakeTracker, but removes need for ehr_id, and finds all ATT forms\r\n//1.0.1 - 01-03-2021 - Haydn Williams - Added limit to last 90 days\r\n\r\nvar ehrIDReplace = \"<ehrid>\";\r\nvar fromDateReplace = \"<FROM_DATE>\";\r\nvar LASTXDAYS = 90;\r\n\r\nfunction getFromDate(days) {\r\n\tvar x = days;\r\n\tif(!x || x == \"\") {\r\n\t\tx = LASTXDAYS;\r\n\t}\r\n\t\r\n\tvar oldDate = null;\r\n\tvar d = new Date();\r\n\toldDate = new Date(d.setDate(d.getDate() - x));\r\n\treturn oldDate.toISOString();\r\n}\r\n\r\nvar getAllCompositionsAQL = \"select DISTINCT e/ehr_id/value as ehr_id, \" +\r\n    \"a/context/start_time/value as created \" +\r\n\t\"from EHR e contains \" +\r\n\t\"COMPOSITION a \" +\r\n\t\"contains EVALUATION a_a[openEHR-EHR-EVALUATION.acute_take_tracker.v0] \" +\r\n\t\"WHERE created > '\" +  fromDateReplace + \"' \" +\r\n\t\"order by created desc \" +\r\n\t\"offset 0 limit 10000000;\";\r\n\t\r\n\r\nvar attAQL = \"SELECT \tc/context/start_time/value as att_completed, \" +\r\n\t\t\"e/ehr_id/value as ehr_id, \" +\r\n\t\t\"e/ehr_status/subject/external_ref/id/value as mrn, \" +\r\n\t\t\"f/data[at0001]/items[at0002]/items[at0006]/value/value as ref_source, \" +\r\n        \"f/data[at0001]/items[at0002]/items[at0011]/value/value as ref_source_other, \" +\r\n        \"f/data[at0001]/items[at0002]/items[at0012]/value/value as ref_location, \" +\r\n        \"f/data[at0001]/items[at0002]/items[at0019]/value/value as ref_comments, \" +\r\n        \"f/data[at0001]/items[at0003]/items[at0020]/value/value as ass_diagnosis, \" +\r\n        \"f/data[at0001]/items[at0003]/items[at0021]/value/value as ass_sideroom_required, \" +\r\n\t\t\"f/data[at0001]/items[at0003]/items[at0024]/value/value as ass_sideroom_reason, \" +\r\n        \"f/data[at0001]/items[at0003]/items[at0028]/value/value as ass_sideroom_reason_other, \" +\r\n        \"f/data[at0001]/items[at0003]/items[at0029]/value/value as ass_covid, \" +\r\n        \"f/data[at0001]/items[at0003]/items[at0032]/value/value as ass_seenjunior, \" +\r\n        \"f/data[at0001]/items[at0003]/items[at0033]/value/value as ass_seenjunior_time, \" +\r\n\t\t\"f/data[at0001]/items[at0003]/items[at0034]/value/value as ass_seenconsultant, \" +\r\n\t\t\"f/data[at0001]/items[at0003]/items[at0035]/value/value as ass_seenconsultant_time, \" +\r\n\t\t\"f/data[at0001]/items[at0003]/items[at0036]/value/value as ass_vte, \" +\r\n\t\t\"f/data[at0001]/items[at0005]/items[at0046]/value/value as out_destination \" +\r\n\"FROM EHR e \" +\r\n\"CONTAINS COMPOSITION c \" +\r\n\"CONTAINS EVALUATION f[openEHR-EHR-EVALUATION.acute_take_tracker.v0] \" +\r\n\"WHERE e/ehr_id/value = '<ehrid>' \" +\r\n\"ORDER BY att_completed desc \" +\r\n\"OFFSET 0 LIMIT 1\";\r\n\r\nfunction getValueOrEmpty(val) {\r\n    if(val != null) {\r\n        return val;\r\n    }\r\n    return '';\r\n}\r\n\r\nfunction processATT(ehrid, baseQuery, results) {\r\n\tvar query = attAQL;\r\n\tbaseQuery.aql = query.replace(ehrIDReplace, ehrid);\r\n\tbaseQuery.callback = function (out, form) {\r\n                var source = getValueOrEmpty(form.ref_source);\r\n                if(source && source.toLowerCase() == 'other') {\r\n                  source = 'Other (' + getValueOrEmpty(form.ref_source_other) + ')';\r\n                }\r\n\r\n                var reasonArray = getValueOrEmpty(form.ass_sideroom_reason);\r\n                var reasons = '';\r\n                var others = '';\r\n                if(reasonArray && reasonArray.length) {\r\n                  for(var i = 0; i < reasonArray.length; i++) {\r\n                    if(reasonArray[i].toLowerCase() == 'other') {\r\n                      others = ', Others (' + getValueOrEmpty(form.ass_sideroom_reason_other) + ')';\r\n                    } else {\r\n                      reasons += ', ' + reasonArray[i];\r\n                    }\r\n                  }\r\n                  reasons += others;\r\n                  reasons = reasons.substring(2);\r\n                }\r\n\t\tresults = {\r\n\t\t\tehrrid: form.ehr_id,\r\n\t\t\tmrn: form.mrn,\r\n\t\t\tatt: {\r\n\t\t\t\tcompleted: form.att_completed,\r\n\t\t\t\treferral: {\r\n\t\t\t\t\tsource:  source,\r\n\t\t\t\t\tlocation: getValueOrEmpty(form.ref_location),\r\n\t\t\t\t\tcomments: getValueOrEmpty(form.ref_comments)\r\n\t\t\t\t},\r\n\t\t\t\tassessment: {\r\n\t\t\t\t\tdiagnosis: getValueOrEmpty(form.ass_diagnosis),\r\n\t\t\t\t\tjunior: getValueOrEmpty(form.ass_seenjunior),\r\n\t\t\t\t\tjunior_time: getValueOrEmpty(form.ass_seenjunior_time),\r\n\t\t\t\t\tconsultant: getValueOrEmpty(form.ass_seenconsultant),\r\n\t\t\t\t\tconsultant_time: getValueOrEmpty(form.ass_seenconsultant_time),\r\n\t\t\t\t\tsideroom: {\r\n\t\t\t\t\t\trequired: getValueOrEmpty(form.ass_sideroom_required) != '',\r\n\t\t\t\t\t\treasons: reasons,\r\n\t\t\t\t\t},\r\n\t\t\t\t\tcovid: getValueOrEmpty(form.ass_covid),\r\n\t\t\t\t\tvte: getValueOrEmpty(form.ass_vte) ? 'Yes' : 'No'\r\n\t\t\t\t},\r\n\t\t\t\toutcome: {\r\n\t\t\t\t\tdestination: getValueOrEmpty(form.out_destination)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\t\r\n\tEhr.allhash({forms: Ehr.query(baseQuery)}, function (res) {\t});\r\n\treturn results;\r\n}\r\n\r\nfunction getFormData(ehrid) {\r\n\tvar results = {};\r\n\tvar baseQuery = {\r\n\t\taql: '',\r\n\t\tparams: [ehrid],\r\n\t\tinitvalue: [],\r\n\t\tcallback: null\r\n\t};\r\n\t\r\n\tvar procs = [processATT];\r\n\t\t\t\t\t\r\n\tfor(var i = 0; i < procs.length; i++) {\r\n\t\tresults = procs[i](ehrid, baseQuery, results);\r\n\t}\r\n\t\r\n    return results;\r\n}\r\n\r\nfunction generateEhrQuery(aql, params) {\r\n    return Ehr.query({\r\n        aql: aql,\r\n        initvalue: [],\r\n        params: params,\r\n        callback: function(out, result) {\r\n            out.push(result);\r\n        }\r\n    });\r\n}\r\n\r\n\r\nfunction getAllCompositions(daysPast) {\r\n\tvar forms = [];\r\n\tvar promises = {\r\n\t\tcompositions: generateEhrQuery(getAllCompositionsAQL.replace(fromDateReplace, getFromDate(daysPast)), {})\r\n\t};\r\n\tEhr.allhash(promises, function (res) {\r\n\t\tfor(var i = 0; i < res.compositions.length; i++) {\r\n\t\t\tif(res.compositions[i].ehr_id) {\r\n\t\t\t\tvar comp = getFormData(res.compositions[i].ehr_id);\r\n\t\t\t\tif(comp) {\r\n\t\t\t\t\tforms.push(comp);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tforms.push({\"att\": {\r\n\t\t\t\t\t\t\"ehrid\": res.compositions[i].ehr_id\r\n\t\t\t\t\t}});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// forms.array.push(res.compositions[i].ehr_id);\r\n\t\t}\r\n\t});\r\n\t\r\n\tforms.sort(function(a,b) {\r\n\t\tvar da = new Date(a.created);\r\n\t\tvar db = new Date(b.created);\r\n\t\treturn db.getTime()-da.getTime(); s// reverse sort\r\n\t});\r\n\r\n\treturn forms;\r\n}\r\n\r\nfunction compute(ctx, src) {\r\n\tvar x = LASTXDAYS;\r\n\tif(ctx && ctx.vars){\r\n\t\tx = ctx.vars.last_x_days;\r\n\t\tif(!x || x == \"\") {\r\n\t\t\tx = ctx.vars.last_x_days = LASTXDAYS;\r\n\t\t}\r\n\t}\r\n\t\r\n\treturn getAllCompositions(x);\r\n}"}]}