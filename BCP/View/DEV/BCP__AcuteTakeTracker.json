{"name":"BCP::AcuteTakeTracker","category":"view","description":"Most recent Acute Take Tracker form data per patient (09-12-2020)","metaData":"{\r\n  \"parameters\": [\r\n      {\r\n          \"name\": \"ehrId\",\r\n          \"type\": \"string\",\r\n          \"description\": \"Ehr id\"\r\n      }\r\n  ]\r\n}","steps":[{"processorName":"js","processorData":"//1.0.0 - 02-12-2020 - Haydn Williams - First draft for dev env\r\n//1.0.1 - 04-12-2020 - Haydn Williams - Squashed some of the data to one variable\r\n//1.0.2 - 09-12-2020 - Haydn Williams - Removed TOP 1, and used LIMIT 1 in AQL, to get around TOP 1 bug returning first composition of the day\r\n\r\nvar ehrIDReplace = \"<ehrid>\";\r\n\r\nvar attAQL = \"SELECT \tc/context/start_time/value as att_completed, \" +\r\n\t\t\"f/data[at0001]/items[at0002]/items[at0006]/value/value as ref_source, \" +\r\n         \"f/data[at0001]/items[at0002]/items[at0011]/value/value as ref_source_other, \" +\r\n        \"f/data[at0001]/items[at0002]/items[at0012]/value/value as ref_location, \" +\r\n        \"f/data[at0001]/items[at0002]/items[at0019]/value/value as ref_comments, \" +\r\n        \"f/data[at0001]/items[at0003]/items[at0020]/value/value as ass_diagnosis, \" +\r\n        \"f/data[at0001]/items[at0003]/items[at0021]/value/value as ass_sideroom_required, \" +\r\n\t\t\"SQUASH(f/data[at0001]/items[at0003]/items[at0024]/value/value) as ass_sideroom_reason, \" +\r\n        \"f/data[at0001]/items[at0003]/items[at0028]/value/value as ass_sideroom_reason_other, \" +\r\n        \"f/data[at0001]/items[at0003]/items[at0029]/value/value as ass_covid, \" +\r\n        \"f/data[at0001]/items[at0003]/items[at0032]/value/value as ass_seenjunior, \" +\r\n        \"f/data[at0001]/items[at0003]/items[at0033]/value/value as ass_seenjunior_time, \" +\r\n\t\t\"f/data[at0001]/items[at0003]/items[at0034]/value/value as ass_seenconsultant, \" +\r\n\t\t\"f/data[at0001]/items[at0003]/items[at0035]/value/value as ass_seenconsultant_time, \" +\r\n\t\t\"f/data[at0001]/items[at0003]/items[at0036]/value/value as ass_vte, \" +\r\n\t\t\"f/data[at0001]/items[at0005]/items[at0046]/value/value as out_destination \" +\r\n\"FROM EHR e \" +\r\n\"CONTAINS COMPOSITION c \" +\r\n\"CONTAINS EVALUATION f[openEHR-EHR-EVALUATION.acute_take_tracker.v0] \" +\r\n\"WHERE e/ehr_id/value = '<ehrid>' \" +\r\n\"ORDER BY att_completed desc \" +\r\n\"OFFSET 0 LIMIT 1\";\r\n\r\nfunction getValueOrEmpty(val) {\r\n    if(val != null) {\r\n        return val;\r\n    }\r\n    return '';\r\n}\r\n\r\nfunction processATT(ehrid, baseQuery, results) {\r\n\tvar query = attAQL;\r\n\tbaseQuery.aql = query.replace(ehrIDReplace, ehrid);\r\n\tbaseQuery.callback = function (out, form) {\r\n                var source = getValueOrEmpty(form.ref_source);\r\n                if(source && source.toLowerCase() == 'other') {\r\n                  source = 'Other (' + getValueOrEmpty(form.ref_source_other) + ')';\r\n                }\r\n\r\n                var reasonArray = getValueOrEmpty(form.ass_sideroom_reason);\r\n                var reasons = '';\r\n                var others = '';\r\n                if(reasonArray && reasonArray.length) {\r\n                  for(var i = 0; i < reasonArray.length; i++) {\r\n                    if(reasonArray[i].toLowerCase() == 'other') {\r\n                      others = ', Others (' + getValueOrEmpty(form.ass_sideroom_reason_other) + ')';\r\n                    } else {\r\n                      reasons += ', ' + reasonArray[i];\r\n                    }\r\n                  }\r\n                  reasons += others;\r\n                  reasons = reasons.substring(2);\r\n                }\r\n\t\tresults.att = {\r\n\t\t\tcompleted: form.att_completed,\r\n\t\t\treferral: {\r\n\t\t\t\tsource:  source,\r\n\t\t\t\tlocation: getValueOrEmpty(form.ref_location),\r\n\t\t\t\tcomments: getValueOrEmpty(form.ref_comments)\r\n\t\t\t},\r\n\t\t\tassessment: {\r\n\t\t\t\tdiagnosis: getValueOrEmpty(form.ass_diagnosis),\r\n\t\t\t\tjunior: getValueOrEmpty(form.ass_seenjunior_time),\r\n\t\t\t\tconsultant: getValueOrEmpty(form.ass_seenconsultant_time),\r\n\t\t\t\tsideroom: {\r\n\t\t\t\t\trequired: getValueOrEmpty(form.ass_sideroom_required) != '',\r\n\t\t\t\t\treasons: reasons,\r\n\t\t\t\t},\r\n\t\t\t\tcovid: getValueOrEmpty(form.ass_covid),\r\n\t\t\t\tvte: getValueOrEmpty(form.ass_vte) ? 'Yes' : 'No'\r\n\t\t\t},\r\n\t\t\toutcome: {\r\n\t\t\t\tdestination: getValueOrEmpty(form.out_destination)\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\t\r\n\tEhr.allhash({forms: Ehr.query(baseQuery)}, function (res) {\t});\r\n\treturn results;\r\n}\r\n\r\nfunction compute(ctx, src) {\r\n\tvar ehrid = ctx.vars.ehrId;\r\n\tif(!ehrid) {\r\n\t\tthrow new Error('No EHRID supplied');\r\n\t}\r\n\tvar results = {};\r\n\tvar baseQuery = {\r\n\t\taql: '',\r\n\t\tparams: ctx.vars,\r\n\t\tinitvalue: [],\r\n\t\tcallback: null\r\n\t};\r\n\t\r\n\tvar procs = [processATT];\r\n\t\t\t\t\t\r\n\tfor(var i = 0; i < procs.length; i++) {\r\n\t\tresults = procs[i](ehrid, baseQuery, results);\r\n\t}\r\n\t\r\n    return results;\r\n}"}]}