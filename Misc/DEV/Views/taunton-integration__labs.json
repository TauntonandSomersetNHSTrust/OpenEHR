{"name":"taunton-integration::labs","category":"view","description":"Taunton Integration Labs Widget","metaData":"{\r\n    \"parameters\": [\r\n        {\r\n            \"name\": \"ehrId\",\r\n            \"description\": \"Ehr id\",\r\n            \"type\": \"string\"\r\n        },\r\n        {\r\n            \"name\": \"dateFrom\",\r\n            \"description\": \"Date from\",\r\n            \"type\": \"string\"\r\n        },\r\n        {\r\n            \"name\": \"dateTo\",\r\n            \"description\": \"Date to\",\r\n            \"type\": \"string\"\r\n        }\r\n    ]\r\n}","steps":[{"processorName":"js","processorData":"// Taunton Integration Labs Widget v1.1.0\r\n// Template required: Laboratory test report v1.0.0\r\n// Authors: Tomaz Kenda (tomaz.kenda@better.care), Vanessa Pereira (vanessa.pereira@better.care)\r\n\r\nfunction compute(ctx, src)\r\n{\r\n    var promises = {\r\n        labsResult: Ehr.query({\r\n            aql: \"SELECT \\n\" +\r\n              \"c/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1]/data[at0001]/events[at0002]/data[at0003]/items[at0005]/value/value as testName, \\n\" +\r\n              \"c/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1]/data[at0001]/events[at0002]/data[at0003]/items[at0005]/value/defining_code/code_string as testCode, \\n\" +\r\n              \"c/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1]/data[at0001]/events[at0002]/data[at0003]/items[at0073]/value/value as testStatusValue, \\n\" +\r\n              \"c/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1]/data[at0001]/events[at0002]/data[at0003]/items[at0101]/value/value as testComment, \\n\" +\r\n              \"c/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1]/other_participations/performer/name as orderPerformer, \\n\" +\r\n              \"c/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1]/data[at0001]/events[at0002]/data[at0003]/items[openEHR-EHR-CLUSTER.laboratory_test_analyte.v1]/items[at0024]/value/value as analyteName, \\n\" +\r\n              \"c/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1]/data[at0001]/events[at0002]/data[at0003]/items[openEHR-EHR-CLUSTER.laboratory_test_analyte.v1]/items[at0024]/value/defining_code/code_string as analyteCode, \\n\" +\r\n              \"c/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1]/data[at0001]/events[at0002]/data[at0003]/items[openEHR-EHR-CLUSTER.specimen.v1]/items[at0015]/value/value as specimenDateTimeCollected, \\n\" +\r\n              \"c/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1]/data[at0001]/events[at0002]/data[at0003]/items[openEHR-EHR-CLUSTER.laboratory_test_analyte.v1]/items[at0005]/value/value as analyteResultStatus, \\n\" +\r\n              \"c/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1]/data[at0001]/events[at0002]/data[at0003]/items[openEHR-EHR-CLUSTER.laboratory_test_analyte.v1]/items[at0005]/value/defining_code/code_string as analyteResultStatusCode, \\n\" +\r\n              \"c/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1]/data[at0001]/events[at0002]/data[at0003]/items[openEHR-EHR-CLUSTER.laboratory_test_analyte.v1]/items[at0001]/value/value as analyteResultText, \\n\" +\r\n              \"c/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1]/data[at0001]/events[at0002]/data[at0003]/items[openEHR-EHR-CLUSTER.laboratory_test_analyte.v1]/items[at0001]/value/magnitude as analyteResultValue, \\n\" +\r\n              \"c/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1]/data[at0001]/events[at0002]/data[at0003]/items[openEHR-EHR-CLUSTER.laboratory_test_analyte.v1]/items[at0001]/value/magnitude_status AS analyteResultMagnitudeStatus, \\n\" +\r\n              \"c/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1]/data[at0001]/events[at0002]/data[at0003]/items[openEHR-EHR-CLUSTER.laboratory_test_analyte.v1]/items[at0001]/value/units as analyteResultValueUnit, \\n\" +\r\n              \"c/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1]/data[at0001]/events[at0002]/data[at0003]/items[openEHR-EHR-CLUSTER.laboratory_test_analyte.v1]/items[at0001]/value/numerator as analyteResultRatioValueNumerator, \\n\" +\r\n              \"c/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1]/data[at0001]/events[at0002]/data[at0003]/items[openEHR-EHR-CLUSTER.laboratory_test_analyte.v1]/items[at0001]/value/denominator as analyteResultValueRatioDenominator, \\n\" +\r\n              \"c/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1]/data[at0001]/events[at0002]/data[at0003]/items[openEHR-EHR-CLUSTER.laboratory_test_analyte.v1]/items[at0001]/value/normal_range/code_string as analyteResultNormalRangeCode, \\n\" +\r\n              \"c/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1]/data[at0001]/events[at0002]/data[at0003]/items[openEHR-EHR-CLUSTER.laboratory_test_analyte.v1]/items[at0001]/value/normal_range/meaning/value as analyteResultValue_ReferenceRangeMeaning, \\n\" +\r\n              \"c/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1]/data[at0001]/events[at0002]/data[at0003]/items[openEHR-EHR-CLUSTER.laboratory_test_analyte.v1]/items[at0001]/value/normal_range/lower/magnitude as analyteResultValue_ReferenceRangeLowerValue, \\n\" +\r\n              \"c/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1]/data[at0001]/events[at0002]/data[at0003]/items[openEHR-EHR-CLUSTER.laboratory_test_analyte.v1]/items[at0001]/value/normal_range/lower/units as analyteResultValue_ReferenceRangeLowerUnits, \\n\" +\r\n              \"c/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1]/data[at0001]/events[at0002]/data[at0003]/items[openEHR-EHR-CLUSTER.laboratory_test_analyte.v1]/items[at0001]/value/normal_range/upper/magnitude as analyteResultValue_ReferenceRangeUpperValue, \\n\" +\r\n              \"c/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1]/data[at0001]/events[at0002]/data[at0003]/items[openEHR-EHR-CLUSTER.laboratory_test_analyte.v1]/items[at0001]/value/normal_range/upper/units as analyteResultValue_ReferenceRangeUpperUnits, \\n\" +\r\n              \"c/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1]/data[at0001]/events[at0002]/data[at0003]/items[openEHR-EHR-CLUSTER.laboratory_test_analyte.v1]/items[at0001]/value/normal_range/lower/denominator as analyteResultDenominator_ReferenceRangeLower, \\n\" +\r\n              \"c/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1]/data[at0001]/events[at0002]/data[at0003]/items[openEHR-EHR-CLUSTER.laboratory_test_analyte.v1]/items[at0001]/value/normal_range/lower/numerator as analyteResultNumerator_ReferenceRangeLower, \\n\" +\r\n              \"c/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1]/data[at0001]/events[at0002]/data[at0003]/items[openEHR-EHR-CLUSTER.laboratory_test_analyte.v1]/items[at0001]/value/normal_range/upper/denominator as analyteResultDenominator_ReferenceRangeUpper, \\n\" +\r\n              \"c/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1]/data[at0001]/events[at0002]/data[at0003]/items[openEHR-EHR-CLUSTER.laboratory_test_analyte.v1]/items[at0001]/value/normal_range/upper/numerator as analyteResultNumerator_ReferenceRangeUpper, \\n\" +\r\n              \"c/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1]/data[at0001]/events[at0002]/data[at0003]/items[openEHR-EHR-CLUSTER.laboratory_test_analyte.v1]/items[at0001]/value/normal_range/lower_included AS analyteResultValue_normalRangeLowerIncluded, \\n\" +\r\n              \"c/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1]/data[at0001]/events[at0002]/data[at0003]/items[openEHR-EHR-CLUSTER.laboratory_test_analyte.v1]/items[at0001]/value/normal_range/upper_included AS analyteResultValue_normalRangeUpperIncluded, \\n\" +\r\n              \"c/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1]/data[at0001]/events[at0002]/data[at0003]/items[openEHR-EHR-CLUSTER.laboratory_test_analyte.v1]/items[at0001]/value/normal_range/lower_unbounded AS analyteResultValue_normalRangeLowerUnbounded, \\n\" +\r\n              \"c/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1]/data[at0001]/events[at0002]/data[at0003]/items[openEHR-EHR-CLUSTER.laboratory_test_analyte.v1]/items[at0001]/value/normal_range/upper_unbounded AS analyteResultValue_normalRangeUpperUnbounded, \\n\" +\r\n              \"c/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1]/data[at0001]/events[at0002]/data[at0003]/items[openEHR-EHR-CLUSTER.laboratory_test_analyte.v1]/items[at0001]/value/normal_status/code_string as analyteNormalStatusCode, \\n\" +\r\n              \"c/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1]/data[at0001]/events[at0002]/data[at0003]/items[openEHR-EHR-CLUSTER.laboratory_test_analyte.v1]/items[at0001]/value/other_reference_ranges/meaning/value as analyteResultOtherReferenceRangeMeaning, \\n\" +\r\n              \"c/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1]/data[at0001]/events[at0002]/data[at0003]/items[openEHR-EHR-CLUSTER.laboratory_test_analyte.v1]/items[at0001]/value/other_reference_ranges/meaning/defining_code/code_string as analyteResultValueStatus, \\n\" +\r\n              \"c/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1]/data[at0001]/events[at0002]/data[at0003]/items[openEHR-EHR-CLUSTER.laboratory_test_analyte.v1]/items[at0001]/value/other_reference_ranges/meaning/defining_code/terminology_id/value as analyteResultOtherReferenceRangeMeaningTerminology, \\n\" +\r\n              \"c/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1]/data[at0001]/events[at0002]/data[at0003]/items[openEHR-EHR-CLUSTER.laboratory_test_analyte.v1]/items[at0001]/value/other_reference_ranges/range/lower/magnitude as analyteResultOtherReferenceRangeLowerMagnitude, \\n\" +\r\n              \"c/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1]/data[at0001]/events[at0002]/data[at0003]/items[openEHR-EHR-CLUSTER.laboratory_test_analyte.v1]/items[at0001]/value/other_reference_ranges/range/lower/units as analyteResultOtherReferenceRangeLowerUnits, \\n\" +\r\n              \"c/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1]/data[at0001]/events[at0002]/data[at0003]/items[openEHR-EHR-CLUSTER.laboratory_test_analyte.v1]/items[at0001]/value/other_reference_ranges/range/upper/magnitude as analyteResultOtherReferenceRangeUpperMagnitude, \\n\" +\r\n              \"c/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1]/data[at0001]/events[at0002]/data[at0003]/items[openEHR-EHR-CLUSTER.laboratory_test_analyte.v1]/items[at0001]/value/other_reference_ranges/range/upper/units as analyteResultOtherReferenceRangeUpperUnits, \\n\" +\r\n              \"c/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1]/data[at0001]/events[at0002]/data[at0003]/items[openEHR-EHR-CLUSTER.laboratory_test_analyte.v1]/items[at0003]/value/value as analyteComment, \\n\" +\r\n              \"c/content[openEHR-EHR-EVALUATION.clinical_synopsis.v1, 'Laboratory test result comment']/data[at0001]/items[at0002, 'Laboratory test result comment']/value/value as reportComment, \\n\" +\r\n              \"c/context/start_time/value as dateCompositionSubmitted, \\n\" +\r\n              \"c/uid/value as compositionId \\n\" +\r\n              \"FROM EHR e [ehr_id/value=:ehrId] \\n\" +\r\n              \"CONTAINS COMPOSITION c \\n\" +\r\n              \"WHERE \\n\" +\r\n              \"c/name/value='Laboratory test report' \\n\" +\r\n              \"AND analyteCode MATCHES {'BS_TCREA','BS_TGLUC', 'BS_TINR', 'BS_TCRP', 'BS_TAPTT', 'BS_TARAT', 'BS_TK', 'BS_TNA', 'BS_TCA', 'BS_TUREA', 'BS_TGFR', 'BS_TMG'} \\n\" +\r\n              \"ORDER BY specimenDateTimeCollected DESC\",\r\n              initvalue: [],\r\n              params: ctx.vars,\r\n              callback: function(out, result) {\r\n                out.push(result);\r\n            }\r\n        })\r\n    };\r\n\r\n    function evaluate(assessment) {\r\n        var exportGroup = [];\r\n\r\n        assessment.map(function(item) {\r\n          item.testName = null;\r\n          if (item.testName === null || item.testName === undefined) {\r\n              if (exportGroup.length > 0) {\r\n                  var existingGroupIndex = -1;\r\n                  var existingItemIndex = -1;\r\n                  exportGroup.forEach(function(group, groupIndex) {\r\n                      if (!!group.title) {\r\n                          return false;\r\n                      }\r\n                      group.items.forEach(function(existingItem, index) {\r\n                          if (!!existingItem.titleLong && !!item.analyteName && existingItem.titleLong.toLowerCase() === item.analyteName.toLowerCase()) {\r\n                              existingItemIndex = index;\r\n                              existingGroupIndex = groupIndex;\r\n                          }\r\n                      });\r\n                  });\r\n                  if (existingGroupIndex === -1) {\r\n                      if (item.analyteName) {\r\n                          exportGroup.push(createGroup(item));\r\n                      }\r\n                  } else if (existingItemIndex !== -1 && existingGroupIndex !== -1) {\r\n                      if (exportGroup[existingGroupIndex].items[existingItemIndex].historicValues.length < 5) {\r\n                          exportGroup[existingGroupIndex].items[existingItemIndex].historicValues.push(createLabValue(item));\r\n                      }\r\n                  } else {\r\n                      exportGroup[existingGroupIndex].items.push(createLabItem(item));\r\n                  }\r\n              } else {\r\n                  if (item.analyteName) {\r\n                      exportGroup.push(createGroup(item));\r\n                  }\r\n              }\r\n            } else {\r\n                if (exportGroup.length > 0) {\r\n                    var existingGroupIndex = -1;\r\n                    var existingItemIndex = -1;\r\n                    exportGroup.forEach(function(group, groupIndex) {\r\n                        if (!!group.title && !!item.testName && group.title.toLowerCase() === item.testName.toLowerCase()) {\r\n                            existingGroupIndex = groupIndex;\r\n                        } \r\n                    });\r\n                    if (existingGroupIndex === -1) {\r\n                        if (item.analyteName) {\r\n                            exportGroup.push(createGroup(item));\r\n                        }\r\n                    } else {\r\n                        exportGroup[existingGroupIndex].items.forEach(function(existingItem, index) {\r\n                            if (existingItem.titleLong.toLowerCase() === item.analyteName.toLowerCase()) {\r\n                                existingItemIndex = index;\r\n                            }\r\n                        });\r\n                        if (existingItemIndex !== -1) {\r\n                            if (exportGroup[existingGroupIndex].items[existingItemIndex].historicValues.length < 5) {\r\n                                exportGroup[existingGroupIndex].items[existingItemIndex].historicValues.push(createLabValue(item));\r\n                            }\r\n                        } else {\r\n                            exportGroup[existingGroupIndex].items.push(createLabItem(item));\r\n                        }\r\n\r\n                    }\r\n                } else {\r\n                    if (item.analyteName) {\r\n                        exportGroup.push(createGroup(item));\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        exportGroup = handleReferenceRangesForGroups(exportGroup);\r\n        return exportGroup;\r\n    }\r\n\r\n    function handleReferenceRangesForGroups(groups) {\r\n      groups.forEach(function(group) {\r\n        group.items.forEach(function(groupItem) {\r\n          var latestValue = groupItem.latestValue;\r\n          var historicValues = groupItem.historicValues;\r\n          if (historicValues.length > 1) {\r\n            latestValue = setTrendIcon(latestValue, historicValues[1]);\r\n          }\r\n          var allRangesSame = true;\r\n          if (historicValues) {\r\n            historicValues.forEach(function(historicValue) {\r\n              if (latestValue.range.minValue !== historicValue.range.minValue ||\r\n                latestValue.range.maxValue !== historicValue.range.maxValue ||\r\n                latestValue.range.lowerIncluded !== historicValue.range.lowerIncluded ||\r\n                latestValue.range.upperIncluded !== historicValue.range.upperIncluded) {\r\n                if (typeof latestValue.value !== 'string' && typeof historicValue.value !== 'string') {\r\n                  allRangesSame = false;\r\n                }\r\n              }\r\n            });\r\n          }\r\n          if (allRangesSame) {\r\n            groupItem.range = getLatestRange(latestValue, historicValues);\r\n            /*\r\n            groupItem.latestValue.range = {minValue: null, maxValue: null};\r\n            groupItem.historicValues = groupItem.historicValues.map(function(historicValue) {\r\n              historicValue.range = {minValue: null, maxValue: null};\r\n              return historicValue;\r\n            });\r\n            */\r\n          } else {\r\n            groupItem.range = getLatestRange(latestValue, historicValues);\r\n            groupItem.warning = 'Different ref. ranges';\r\n            groupItem.warningIcon = 'triangle-exclamation text-danger';\r\n          }\r\n        })\r\n      });\r\n      return groups;\r\n    }\r\n\r\n    function getLatestRange(latestValue, historicValues) {\r\n      if (((latestValue.range.minValue !== null && latestValue.range.minValue !== undefined) || (latestValue.range.maxValue !== null && latestValue.range.maxValue !== undefined)) && typeof latestValue.value === 'number') {\r\n        return {\r\n            minValue: latestValue.range.minValue, \r\n            lowerIncluded: latestValue.range.lowerIncluded,\r\n            maxValue: latestValue.range.maxValue,\r\n            upperIncluded: latestValue.range.upperIncluded};\r\n      } else if (historicValues.length > 0) {\r\n\r\n        var historicValueWithRange = null;\r\n        historicValues.forEach(function(historicValue) {\r\n          if (historicValueWithRange === null && (historicValue.range.minValue !== null && historicValue.range.minValue !== undefined) || (historicValue.range.maxValue !== null && historicValue.range.maxValue !== undefined)) {\r\n            historicValueWithRange = historicValue;\r\n          }\r\n        });\r\n        return historicValueWithRange ? {\r\n            minValue: historicValueWithRange.range.minValue,\r\n            lowerIncluded: latestValue.range.lowerIncluded,\r\n            maxValue: historicValueWithRange.range.maxValue,\r\n            upperIncluded: latestValue.range.upperIncluded\r\n          } : {minValue: null, maxValue: null};\r\n      }\r\n    }\r\n\r\n    function setTrendIcon(latestValue, historicValue) {\r\n      if (latestValue !== null && latestValue.value !== null && historicValue !== null &&  historicValue.value !== null) {\r\n        if (latestValue.value > historicValue.value) {\r\n            latestValue.trendIcon = 'trend-up';\r\n            latestValue.trendIconDescription = 'Value increased';\r\n        } else if (latestValue.value < historicValue.value) {\r\n            latestValue.trendIcon = 'trend-down';\r\n            latestValue.trendIconDescription = 'Value decreased';\r\n        } else {\r\n            latestValue.trendIcon = null;\r\n        }\r\n      }\r\n      return latestValue;\r\n    }\r\n\r\n    function createGroup(analyte) {\r\n        var dateCollected;\r\n        if (analyte.specimenDateTimeCollected) {\r\n            dateCollected = analyte.specimenDateTimeCollected;\r\n        }\r\n        return {\r\n            title: analyte.testName,\r\n            date: dateCollected,\r\n            items: [createLabItem(analyte)]\r\n        };\r\n    }\r\n\r\n    function createLabItem(analyte) {\r\n      var latestValue = createLabValue(analyte);\r\n      var historicValues = [createLabValue(analyte)];\r\n      return {\r\n          titleLong: analyte.analyteName,\r\n          unit: analyte.analyteResultValueUnit,\r\n          latestValue: latestValue,\r\n          range: {minValue: null, maxValue: null},\r\n          historicValues: historicValues\r\n        };\r\n    }\r\n    function mapValueStatusToClass(status) {\r\n        var normalStatusToClassMapping = {\r\n            \"LLL\": \"hr\",\r\n            \"LL\": \"mr\",\r\n            \"L\": \"lmr\",\r\n            \"N\": \"lr\",\r\n            \"H\": \"lmr\",\r\n            \"HH\": \"mr\",\r\n            \"HHH\": \"hr\"\r\n        };\r\n        return normalStatusToClassMapping[status];\r\n    }\r\n    function abnormalFlagTooltipMapping(status) {\r\n      var normalStatusToClassMapping = {\r\n        \"LL\": \"Significantly low\",\r\n        \"L\": \"Low\",\r\n        \"H\": \"High\",\r\n        \"HH\": \"Significantly high\",\r\n        \"C\": \"Significant change\",\r\n        \"CC\": \"Highly significant change\",\r\n        \"A\": \"Abnormal\"\r\n    };\r\n    return normalStatusToClassMapping[status];\r\n    }\r\n    function createLabValue(analyte) {\r\n        // analyteResultValueStatus for class\r\n        var dateCollected;\r\n        if (analyte.specimenDateTimeCollected) {\r\n            dateCollected = analyte.specimenDateTimeCollected;\r\n        }\r\n        var details = {\r\n          title: 'COMMENT',\r\n          list: []\r\n        }\r\n        if (analyte.analyteComment) {\r\n          details.list.push({label: 'Test result', value: analyte.analyteComment});\r\n        }\r\n        if (analyte.testComment) {\r\n          details.list.push({ label: 'Panel', value: analyte.testComment });\r\n        }\r\n        if (analyte.reportComment) {\r\n          details.list.push({label: 'Report', value: analyte.reportComment});\r\n        }\r\n        var analyteBadge, icons;\r\n        var value = analyte.analyteResultText || analyte.analyteResultValue || analyte.analyteResultRatioValueNumerator;\r\n        if (details.list.length) {\r\n          icons = ['messaging text-primary selected'];\r\n        }\r\n        var abnormalFlag, abnormalFlagTooltip;\r\n        if (!analyte.analyteResultStatusCode || (analyte.analyteResultStatusCode && analyte.analyteResultStatusCode !== 'at0022')) {\r\n          if (analyte.analyteResultValueStatus && analyte.analyteResultValueStatus !== 'N') {\r\n            abnormalFlag = analyte.analyteResultValueStatus;\r\n            abnormalFlagTooltip = abnormalFlagTooltipMapping(abnormalFlag);\r\n          } else if (analyte.analyteNormalStatusCode && analyte.analyteNormalStatusCode !== 'N') {\r\n            abnormalFlag = analyte.analyteNormalStatusCode;\r\n            abnormalFlagTooltip = abnormalFlagTooltipMapping(abnormalFlag);\r\n          }\r\n        }\r\n        var rangeMinValue, rangeMaxValue, rangeLowerIncluded, rangeUpperIncluded;\r\n        if (analyte.analyteResultValue_ReferenceRangeLowerValue !== null) {\r\n          rangeMinValue = analyte.analyteResultValue_ReferenceRangeLowerValue;\r\n        } else if (analyte.analyteResultNumerator_ReferenceRangeLower !== null) {\r\n          rangeMinValue = analyte.analyteResultNumerator_ReferenceRangeLower;\r\n        }\r\n        if (analyte.analyteResultValue_ReferenceRangeUpperValue !== null) {\r\n          rangeMaxValue = analyte.analyteResultValue_ReferenceRangeUpperValue;\r\n        } else if (analyte.analyteResultNumerator_ReferenceRangeUpper !== null) {\r\n          rangeMaxValue = analyte.analyteResultNumerator_ReferenceRangeUpper;\r\n        }\r\n        if (analyte.analyteResultValue_normalRangeLowerIncluded !== null) {\r\n          rangeLowerIncluded = analyte.analyteResultValue_normalRangeLowerIncluded;\r\n        } \r\n        if (analyte.analyteResultValue_normalRangeUpperIncluded !== null) {\r\n          rangeUpperIncluded = analyte.analyteResultValue_normalRangeUpperIncluded\r\n        }\r\n        var valuePrefix = analyte.analyteResultMagnitudeStatus;\r\n        value = valuePrefix ? valuePrefix + '' + value : value;\r\n        if (analyte.analyteResultStatusCode) {\r\n          if (analyte.analyteResultStatusCode === 'at0019') {\r\n            analyteBadge = {class: 'badge-warning', text: analyte.analyteResultStatus};\r\n          } else if (analyte.analyteResultStatusCode === 'at0022') {\r\n            value = {class: 'badge-danger', text: 'Entered in error'};\r\n          }\r\n        }\r\n        return {\r\n            value: value,\r\n            unit: analyte.analyteResultValueUnit,\r\n            class: mapValueStatusToClass(analyte.analyteResultValueStatus),\r\n            date: dateCollected,\r\n            abnormalFlag: abnormalFlag,\r\n            abnormalFlagTooltip: abnormalFlagTooltip,\r\n            composer: analyte.orderPerformer,\r\n            range: {\r\n              minValue: rangeMinValue,\r\n              lowerIncluded: rangeLowerIncluded,\r\n              maxValue: rangeMaxValue,\r\n              upperIncluded: rangeUpperIncluded\r\n            },\r\n            details: details.list.length > 0 ? [details] : null,\r\n            badge: analyteBadge,\r\n            icons: icons\r\n        };\r\n    }\r\n\r\n    var groups;\r\n    Ehr.allhash(promises, function (res) {\r\n        if (res['labsResult'] && res['labsResult'].length > 0) {\r\n            groups = evaluate(res['labsResult']);\r\n        }\r\n    });\r\n    \r\n     return groups ? {\r\n        'widgetType': 'LAB_RESULTS',    // RISK_STAGE | LIST_OF_FORMS | SINGLE_PARAMETER;\r\n        'titleShort': 'Lab results',\r\n        'titleLong': 'Laboratory results',\r\n        'groups': groups\r\n    } : null;\r\n}\r\n"}]}