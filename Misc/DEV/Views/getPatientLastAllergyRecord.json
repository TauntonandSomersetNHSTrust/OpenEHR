{"name":"getPatientLastAllergyRecord","category":"view","description":"getPatientLastAllergyRecord","metaData":"{\r\n    \"parameters\": [\r\n        {\r\n            \"name\": \"ehrId\",\r\n            \"description\": \"Ehr id\",\r\n            \"type\": \"string\"\r\n        }\r\n    ]\r\n}","steps":[{"processorName":"js","processorData":"// This view requires enabled querying by tags\r\nfunction compute(ctx, src)\r\n{\r\n  var compositionUid = findLatestCompositionUid();\r\n  return !compositionUid ? {\r\n    allergies: [],\r\n    createTimeStamp: null,\r\n    ehrId: ctx.vars.ehrId,\r\n    status: \"NOT_CHECKED\"\r\n  } : loadAllergiesFromComposition(compositionUid);\r\n\r\n  function loadAllergiesFromComposition(compositionUid)\r\n  {\r\n    var promises = {\r\n      allergyRecord: Ehr.query({\r\n        aql: \"SELECT TOP 100 c/context/start_time/value as lastUpdatedTime,\\n\" +\r\n        \"c/uid/value as compositionId,\" +\r\n        \"c/composer/name as composerName,\\n\" +\r\n        \"c/composer/external_ref/id/value as composerId,\\n\" +\r\n        \"squash(c/content[openEHR-EHR-SECTION.allergies_adverse_reactions_rcp.v1]/items[openEHR-EHR-OBSERVATION.progress_note.v1]/data[at0001]/events[at0002]/data[at0003]/items[at0004]/value/value) as generalComment, \\n\" +\r\n        \"squash(c/content[openEHR-EHR-SECTION.allergies_adverse_reactions_rcp.v1]/items[openEHR-EHR-OBSERVATION.progress_note.v1]/data[at0001]/events[at0002]/time/value) as generalCommentTime, \\n\" +\r\n        \"squash(c/content[openEHR-EHR-SECTION.allergies_adverse_reactions_rcp.v1]/items[openEHR-EHR-OBSERVATION.progress_note.v1]/other_participations/performer/name) as authorName, \\n\" +\r\n        \"squash(c/content[openEHR-EHR-SECTION.allergies_adverse_reactions_rcp.v1]/items[openEHR-EHR-OBSERVATION.progress_note.v1]/other_participations/performer/external_ref/id/value) as authorId, \\n\" +\r\n        \"a/data[at0001]/items[at0002, 'Causative agent']/value/value as allergenName,\\n\" +\r\n        \"a/data[at0001]/items[at0006]/value/value as comment,\\n\" +\r\n        \"squash(a/data[at0001]/items[at0009, 'Reaction details']/items[at0011]/value) as manifestation,\\n\" +\r\n        \"a/data[at0001]/items[at0002, 'Causative agent']/value/defining_code/code_string as allergenId,\\n\" +\r\n        \"a/data[at0001]/items[at0063]/value/defining_code/code_string as statusCode,\\n\" +\r\n        \"a_b/data[at0001]/items[at0002, 'Global exclusion of adverse reactions']/value/value as globalExclusion,\\n\" +\r\n        \"z/items[at0001]/value/value as mergeStatus,\\n\" +\r\n        \"z/items[at0004]/value/value as mergeTimestamp,\\n\" +\r\n        \"a_c/data[at0001]/items[at0002]/value/value as absenceStatement,\\n\" +\r\n        // \"tags(c, 'merge.merged_at') as tagMergedAt,\\n\"+\r\n        // \"tags(c, 'merge.action_status') as tagActionStatus,\\n\"+\r\n        \"tags(c) as tags\\n\" +\r\n        \"FROM EHR[ehr_id/value=:ehrId]\\n\" +\r\n        \"CONTAINS COMPOSITION c [openEHR-EHR-COMPOSITION.adverse_reaction_list.v1]\\n\" +\r\n        \"CONTAINS (\\n\" +\r\n        \"EVALUATION a[openEHR-EHR-EVALUATION.adverse_reaction_risk.v1] OR\\n\" +\r\n        \"EVALUATION a_b[openEHR-EHR-EVALUATION.exclusion_global.v1] OR\\n\" +\r\n        \"EVALUATION a_c[openEHR-EHR-EVALUATION.absence.v1] OR\\n\" +\r\n        \"CLUSTER z[openEHR-EHR-CLUSTER.merge_status.v0])\\n\" +\r\n        \"WHERE c/name/value = 'Adverse Reaction List' AND c/uid/value =:compositionUid\\n\" +\r\n        \"ORDER BY c/context/start_time DESC\\n\",\r\n        initvalue: [],\r\n        params: {\r\n          ehrId: ctx.vars.ehrId,\r\n          compositionUid: compositionUid\r\n        },\r\n        callback: function(out, allergyRecord) {\r\n          out.push({\r\n            lastUpdatedTime: allergyRecord.lastUpdatedTime,\r\n            composerName: allergyRecord.composerName,\r\n            composerId: allergyRecord.composerId,\r\n            compositionId: allergyRecord.compositionId,\r\n            allergenName: allergyRecord.allergenName,\r\n            allergenId: allergyRecord.allergenId,\r\n            statusCode: allergyRecord.statusCode,\r\n            globalExclusion: allergyRecord.globalExclusion,\r\n            absenceStatement: allergyRecord.absenceStatement,\r\n            comment: allergyRecord.comment,\r\n            manifestation: allergyRecord.manifestation,\r\n            mergeStatus: allergyRecord.mergeStatus,\r\n            mergeTimestamp: allergyRecord.mergeTimestamp,\r\n            generalComment: allergyRecord.generalComment,\r\n            authorName: allergyRecord.authorName,\r\n            authorId: allergyRecord.authorId,\r\n            commentDate: allergyRecord.generalCommentTime,\r\n            // tagMergedAt: allergyRecord.tagMergedAt,\r\n            // tagActionStatus: allergyRecord.tagActionStatus,\r\n            tags: allergyRecord.tags\r\n          });\r\n        }\r\n      })\r\n    };\r\n\r\n    output = {};\r\n    Ehr.allhash(promises, function(res) {\r\n      var allergyRecords = res.allergyRecord;\r\n      var firstRecord = allergyRecords[0] || {};\r\n      var lastUpdatedTime = firstRecord.lastUpdatedTime;\r\n      var containsAllergies = !!firstRecord.allergenName;\r\n      var globalExclusion = firstRecord.globalExclusion;\r\n      var absenceStatement = firstRecord.absenceStatement;\r\n      var composerName = firstRecord.composerName;\r\n      var generalComment = firstRecord.generalComment;\r\n      var composerId = firstRecord.composerId;\r\n      var mergeStatus = firstRecord.mergeStatus;\r\n      var mergeTimestamp = firstRecord.mergeTimestamp;\r\n      var tagsList = (typeof firstRecord !== 'undefined' && firstRecord.tags != null && typeof firstRecord.tags !== 'undefined' && typeof firstRecord.tags.tags !== 'undefined') ? firstRecord.tags.tags : [];\r\n      var tags = {};\r\n      for (var i = 0; i < tagsList.length; i++) {\r\n        var el = tagsList[i];\r\n        tags[el['tag']] = el['value'];\r\n      }\r\n      output.allergies = [];\r\n      output.createTimeStamp = lastUpdatedTime;\r\n      output.ehrId = ctx.vars.ehrId;\r\n      output.composerName = composerName;\r\n      output.composerId = composerId;\r\n      output.generalComment = {\r\n          value: firstRecord.generalComment,\r\n          date: firstRecord.commentDate,\r\n          creator: firstRecord.authorName,\r\n          creatorId: firstRecord.authorId\r\n      };\r\n      output.compositionId = firstRecord.compositionId;\r\n      output.tags = tagsList;\r\n      output.mergeStatus = tags['merge.action_status'];\r\n      output.mergeTimestamp = tags['merge.merged_at'];\r\n      // output.mergeStatus = firstRecord.tagMergedAt;\r\n      // output.mergeTimestamp = firstRecord.tagActionStatus;\r\n      // output.mergeStatus = mergeStatus;\r\n      // output.mergeTimestamp = mergeTimestamp;\r\n      \r\n      if (containsAllergies)\r\n      {\r\n        for (var i = 0; i < allergyRecords.length; i++)\r\n        {\r\n          var reactions = [];\r\n          if (allergyRecords[i].manifestation) {\r\n            for (var j = 0; j < allergyRecords[i].manifestation.length; j++) {\r\n                if (allergyRecords[i].manifestation[j]) {\r\n                reactions.push({description: allergyRecords[i].manifestation[j].value,\r\n                                // code: null});\r\n                                code: allergyRecords[i].manifestation[j].defining_code.code_string});\r\n                                // code: allergyRecords[i].manifestation[j].defining_code2.code_string});\r\n                }\r\n            }\r\n          }\r\n          output.allergies.push({\r\n            allergen: {\r\n              id: allergyRecords[i].allergenId,\r\n              name: allergyRecords[i].allergenName\r\n            },\r\n            reaction: reactions,\r\n            comment: allergyRecords[i].comment,\r\n            status: allergyRecords[i].statusCode\r\n          });\r\n        }\r\n      }\r\n\r\n      else if (globalExclusion != null)\r\n      {\r\n        output.status = \"NO_KNOWN_ALLERGIES\";\r\n      }\r\n      else if (absenceStatement != null)\r\n      {\r\n        output.status = \"NO_INFORMATION\";\r\n      }\r\n      else\r\n      {\r\n        output.status = \"NOT_CHECKED\";\r\n      }\r\n      if (output.allergies.length !== 0)\r\n      {\r\n        output.status = \"PRESENT\";\r\n      }\r\n\r\n      // if (!!output.allergies && !!output.status)\r\n      // {\r\n      //   output.status = \"NO_KNOWN_ALLERGIES\";\r\n      // }\r\n    });\r\n\r\n    return output\r\n  }\r\n\r\n  function findLatestCompositionUid()\r\n  {\r\n    var promises = {\r\n      allergyRecord: Ehr.query({\r\n        aql: \"SELECT TOP 1\" +\r\n            \" c/uid/value as compositionUid\" +\r\n            \" FROM EHR[ehr_id/value='\" + ctx.vars.ehrId + \"']\" +\r\n            \" CONTAINS COMPOSITION c\" +\r\n            \" WHERE c/name/value = 'Adverse Reaction List' \" +\r\n            \" ORDER BY c/context/start_time DESC\",\r\n        initvalue: [],\r\n        params: ctx.vars,\r\n        callback: function(out, allergyRecord) {\r\n          out.push({\r\n            \"compositionUid\": allergyRecord[\"compositionUid\"]\r\n          });\r\n        }\r\n      })\r\n    };\r\n\r\n    var result = \"\";\r\n    Ehr.allhash(promises, function(res) {\r\n      if (!!res.allergyRecord[0])\r\n      {\r\n        result = res.allergyRecord[0].compositionUid;\r\n      }\r\n    });\r\n\r\n    return result\r\n  }\r\n}\r\n"}]}