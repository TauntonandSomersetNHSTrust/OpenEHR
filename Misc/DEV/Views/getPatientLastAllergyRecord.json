{"name":"getPatientLastAllergyRecord","category":"view","description":"getPatientLastAllergyRecord","metaData":"{\n    \"parameters\": [\n        {\n            \"name\": \"ehrId\",\n            \"description\": \"Ehr id\",\n            \"type\": \"string\"\n        }\n    ]\n}","steps":[{"processorName":"js","processorData":"// EHR View - getPatientLastAllergyRecord v1.2.0\r\n// Part of Allergies module v1.2.0\r\n// Requires template: Adverse Reaction List.v1 (SEM_VER:1.1.0, please check template metadata)\r\n// This view requires enabled querying by tags\r\n\r\nfunction compute(ctx, src)\r\n{\r\n  var compositionUid = findLatestCompositionUid();\r\n  return !compositionUid ? {\r\n    allergies: [],\r\n    createTimeStamp: null,\r\n    ehrId: ctx.vars.ehrId,\r\n    status: \"NOT_CHECKED\"\r\n  } : loadAllergiesFromComposition(compositionUid);\r\n\r\n  function loadAllergiesFromComposition(compositionUid)\r\n  {\r\n    var promises = {\r\n      allergyRecord: Ehr.query({\r\n        aql: \"SELECT TOP 100 c/context/start_time/value as lastUpdatedTime, \\n\" +\r\n                \"c/uid/value as compositionId, \\n\" +\r\n                \"c/composer/name as composerName, \\n\" +\r\n                \"c/composer/external_ref/id/value as composerId, \\n\" +\r\n                \"squash(c/content[openEHR-EHR-SECTION.allergies_adverse_reactions_rcp.v1]/items[openEHR-EHR-OBSERVATION.progress_note.v1]/data[at0001]/events[at0002]/data[at0003]/items[at0004]/value/value) as generalComment, \\n\" +\r\n                \"squash(c/content[openEHR-EHR-SECTION.allergies_adverse_reactions_rcp.v1]/items[openEHR-EHR-OBSERVATION.progress_note.v1]/data[at0001]/events[at0002]/time/value) as generalCommentTime, \\n\" +\r\n                \"squash(c/content[openEHR-EHR-SECTION.allergies_adverse_reactions_rcp.v1]/items[openEHR-EHR-OBSERVATION.progress_note.v1]/other_participations/performer/name) as authorName, \\n\" +\r\n                \"squash(c/content[openEHR-EHR-SECTION.allergies_adverse_reactions_rcp.v1]/items[openEHR-EHR-OBSERVATION.progress_note.v1]/other_participations/performer/external_ref/id/value) as authorId, \\n\" +\r\n                \"a/data[at0001]/items[at0002, 'Causative agent']/value/value as allergenName, \\n\" +\r\n                \"a/data[at0001]/items[at0002, 'Causative agent']/value/defining_code/code_string as allergenCode, \\n\" +\r\n                \"a/data[at0001]/items[at0002, 'Causative agent']/value/defining_code/terminology_id/value as allergenTerminologySource, \\n\" +\r\n                \"a/data[at0001]/items[at0063]/value/defining_code/code_string as statusCode, \\n\" +\r\n                \"a/data[at0001]/items[at0063]/value/value as statusValue, \\n\" +\r\n                \"squash(a/data[at0001]/items[at0009, 'Reaction details']/items[at0011]/value/value) as manifestationValue, \\n\" +\r\n                \"squash(a/data[at0001]/items[at0009, 'Reaction details']/items[at0011]/value/defining_code/terminology_id/value) as manifestationVocabulary, \\n\" +\r\n                \"squash(a/data[at0001]/items[at0009, 'Reaction details']/items[at0011]/value/defining_code/code_string) as manifestationCode, \\n\" +\r\n                \"a/data[at0001]/items[at0006]/value/value as comment, \\n\" +\r\n                \"a/provider/name as informedBy, \\n\" +\r\n                \"a_b/data[at0001]/items[at0002, 'Global exclusion of adverse reactions']/value/value as globalExclusion, \\n\" +\r\n                \"z/items[at0001]/value/value as mergeStatus, \\n\" +\r\n                \"z/items[at0004]/value/value as mergeTimestamp, \\n\" +\r\n                \"a_c/data[at0001]/items[at0002]/value/value as absenceStatement, tags(c,'merge.merged_at') as tagMergedAt, tags(c, 'merge.action_status') as tagActionStatus, tags(c) as tags, \\n\" +\r\n                \"a/data[at0001]/items[at0101]/value/value as criticalityValue, \\n\" +\r\n                \"a/data[at0001]/items[at0101]/value/defining_code/code_string as criticalityCode, \\n\" +\r\n                \"a/data[at0001]/items[at0117]/value/value as lastOnsetOfReaction \\n\" +\r\n                \"FROM EHR e [ehr_id/value=:ehrId] \\n\" +\r\n                \"CONTAINS COMPOSITION c [openEHR-EHR-COMPOSITION.adverse_reaction_list.v1] \\n\" +\r\n                \"CONTAINS (EVALUATION a[openEHR-EHR-EVALUATION.adverse_reaction_risk.v1] OR \\n\" +\r\n                \"EVALUATION a_b[openEHR-EHR-EVALUATION.exclusion_global.v1] OR \\n\" +\r\n                \"EVALUATION a_c[openEHR-EHR-EVALUATION.absence.v1] OR \\n\" +\r\n                \"CLUSTER z[openEHR-EHR-CLUSTER.merge_status.v0] OR \\n\" +\r\n                \"ADMIN_ENTRY r[openEHR-EHR-ADMIN_ENTRY.adverse_reaction_risk_deleted_entries.v0]) \\n\" +\r\n                \"WHERE c/name/value='Adverse Reaction List' AND c/uid/value =:compositionUid \\n\" +\r\n                \"ORDER BY c/context/start_time DESC \\n\" ,\r\n        initvalue: [],\r\n        params: {\r\n          ehrId: ctx.vars.ehrId,\r\n          compositionUid: compositionUid\r\n        },\r\n        callback: function(out, allergyRecord) {\r\n          out.push({\r\n            lastUpdatedTime: allergyRecord.lastUpdatedTime,\r\n            composerName: allergyRecord.composerName,\r\n            composerId: allergyRecord.composerId,\r\n            compositionId: allergyRecord.compositionId,\r\n            allergenName: allergyRecord.allergenName,\r\n            allergenCode: allergyRecord.allergenCode,\r\n            allergenTerminologySource: allergyRecord.allergenTerminologySource,\r\n            statusCode: allergyRecord.statusCode,\r\n            statusValue: allergyRecord.statusValue,\r\n            globalExclusion: allergyRecord.globalExclusion,\r\n            absenceStatement: allergyRecord.absenceStatement,\r\n            comment: allergyRecord.comment,\r\n            informedBy: allergyRecord.informedBy,\r\n            criticalityCode: allergyRecord.criticalityCode,\r\n            criticalityValue: allergyRecord.criticalityValue,\r\n            lastOnsetOfReaction: allergyRecord.lastOnsetOfReaction,\r\n            manifestationValue: allergyRecord.manifestationValue,\r\n            manifestationCode: allergyRecord.manifestationCode,\r\n            manifestationVocabulary: allergyRecord.manifestationVocabulary,\r\n            mergeStatus: allergyRecord.mergeStatus,\r\n            mergeTimestamp: allergyRecord.mergeTimestamp,\r\n            generalComment: allergyRecord.generalComment,\r\n            authorName: allergyRecord.authorName,\r\n            authorId: allergyRecord.authorId,\r\n            commentDate: allergyRecord.generalCommentTime,\r\n            // tagMergedAt: allergyRecord.tagMergedAt,\r\n            // tagActionStatus: allergyRecord.tagActionStatus,\r\n            tags: allergyRecord.tags\r\n          });\r\n        }\r\n      })\r\n    };\r\n\r\n    output = {};\r\n    Ehr.allhash(promises, function(res) {\r\n      var allergyRecords = res.allergyRecord;\r\n      var firstRecord = allergyRecords[0] || {};\r\n      var lastUpdatedTime = firstRecord.lastUpdatedTime;\r\n      var containsAllergies = !!firstRecord.allergenName;\r\n      var globalExclusion = firstRecord.globalExclusion;\r\n      var absenceStatement = firstRecord.absenceStatement;\r\n      var composerName = firstRecord.composerName;\r\n      var generalComment = firstRecord.generalComment;\r\n      var composerId = firstRecord.composerId;\r\n      var mergeStatus = firstRecord.mergeStatus;\r\n      var mergeTimestamp = firstRecord.mergeTimestamp;\r\n      var tagsList = (typeof firstRecord !== 'undefined' && firstRecord.tags != null && typeof firstRecord.tags !== 'undefined' && typeof firstRecord.tags.tags !== 'undefined') ? firstRecord.tags.tags : [];\r\n      var tags = {};\r\n      for (var i = 0; i < tagsList.length; i++) {\r\n        var el = tagsList[i];\r\n        tags[el['tag']] = el['value'];\r\n      }\r\n      output.allergies = [];\r\n      output.createTimeStamp = lastUpdatedTime;\r\n      output.ehrId = ctx.vars.ehrId;\r\n      output.composerName = composerName;\r\n      output.composerId = composerId;\r\n      output.generalComment = {\r\n          value: firstRecord.generalComment,\r\n          date: firstRecord.commentDate,\r\n          creator: firstRecord.authorName,\r\n          creatorId: firstRecord.authorId\r\n      };\r\n      output.compositionId = firstRecord.compositionId;\r\n      output.tags = tagsList;\r\n      output.mergeStatus = tags['merge.action_status'];\r\n      output.mergeTimestamp = tags['merge.merged_at'];\r\n      // output.mergeStatus = firstRecord.tagMergedAt;\r\n      // output.mergeTimestamp = firstRecord.tagActionStatus;\r\n      // output.mergeStatus = mergeStatus;\r\n      // output.mergeTimestamp = mergeTimestamp;\r\n      \r\n      if (containsAllergies)\r\n      {\r\n        for (var i = 0; i < allergyRecords.length; i++)\r\n        {\r\n          var reactions = [];\r\n          if (allergyRecords[i].manifestationValue) {\r\n            for (var j = 0; j < allergyRecords[i].manifestationValue.length; j++) {\r\n                if (allergyRecords[i].manifestationValue[j]) {\r\n                reactions.push({description: allergyRecords[i].manifestationValue[j],\r\n                                // code: null});\r\n                                vocabulary: allergyRecords[i].manifestationVocabulary[j],\r\n                                code: allergyRecords[i].manifestationCode[j]});\r\n                                // code: allergyRecords[i].manifestation[j].defining_code2.code_string});\r\n                }\r\n            }\r\n          }\r\n          var criticality = null;\r\n          if (allergyRecords[i].criticalityCode && allergyRecords[i].criticalityValue) {\r\n            criticality = {code: allergyRecords[i].criticalityCode, value: allergyRecords[i].criticalityValue};\r\n          }\r\n          output.allergies.push({\r\n            allergen: {\r\n              code: allergyRecords[i].allergenCode,\r\n              name: allergyRecords[i].allergenName,\r\n              vocabulary: allergyRecords[i].allergenTerminologySource\r\n            },\r\n            comment: allergyRecords[i].comment,\r\n            criticality: criticality,\r\n            lastOnsetOfReaction: allergyRecords[i].lastOnsetOfReaction,\r\n            reaction: reactions,\r\n            informedBy: allergyRecords[i].informedBy,\r\n            status: {code: allergyRecords[i].statusCode, value: allergyRecords[i].statusValue}\r\n          });\r\n        }\r\n      }\r\n\r\n      else if (globalExclusion != null)\r\n      {\r\n        output.status = \"NO_KNOWN_ALLERGIES\";\r\n      }\r\n      else if (absenceStatement != null)\r\n      {\r\n        output.status = \"NO_INFORMATION\";\r\n      }\r\n      else\r\n      {\r\n        output.status = \"NOT_CHECKED\";\r\n      }\r\n      if (output.allergies.length !== 0)\r\n      {\r\n        output.status = \"PRESENT\";\r\n      }\r\n\r\n      // if (!!output.allergies && !!output.status)\r\n      // {\r\n      //   output.status = \"NO_KNOWN_ALLERGIES\";\r\n      // }\r\n    });\r\n\r\n    return output\r\n  }\r\n\r\n  function findLatestCompositionUid()\r\n  {\r\n    var promises = {\r\n      allergyRecord: Ehr.query({\r\n        aql: \"SELECT TOP 1\" +\r\n            \" c/uid/value as compositionUid\" +\r\n            \" FROM EHR[ehr_id/value='\" + ctx.vars.ehrId + \"']\" +\r\n            \" CONTAINS COMPOSITION c\" +\r\n            \" WHERE c/name/value = 'Adverse Reaction List' \" +\r\n            \" ORDER BY c/context/start_time DESC\",\r\n        initvalue: [],\r\n        params: ctx.vars,\r\n        callback: function(out, allergyRecord) {\r\n          out.push({\r\n            \"compositionUid\": allergyRecord[\"compositionUid\"]\r\n          });\r\n        }\r\n      })\r\n    };\r\n\r\n    var result = \"\";\r\n    Ehr.allhash(promises, function(res) {\r\n      if (!!res.allergyRecord[0])\r\n      {\r\n        result = res.allergyRecord[0].compositionUid;\r\n      }\r\n    });\r\n\r\n    return result\r\n  }\r\n}\r\n"}]}