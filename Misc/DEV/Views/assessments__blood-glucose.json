{"name":"assessments::blood-glucose","category":"view","description":"blood glucose widget","metaData":"{\r\n    \"parameters\": [\r\n        {\r\n            \"name\": \"ehrId\",\r\n            \"description\": \"Ehr id\",\r\n            \"type\": \"string\"\r\n        },\r\n        {\r\n            \"name\": \"dateFrom\",\r\n            \"description\": \"Date from\",\r\n            \"type\": \"string\"\r\n        },\r\n        {\r\n            \"name\": \"dateTo\",\r\n            \"description\": \"Date to\",\r\n            \"type\": \"string\"\r\n        }\r\n    ]\r\n}","steps":[{"processorName":"js","processorData":"// Blood Glucose Widget View v1.1.0\r\n// Template required: Laboratory test report 1.0.0\r\n// Authors: Tomaz Kenda (tomazk@better.care), Vanessa Pereira (vanessap@better.care)\r\n\r\nfunction compute(ctx, src)\r\n{\r\n    var promises = {\r\n        bloodGlucose: Ehr.query({\r\n            aql: \"SELECT c, \\n\" +\r\n              \"c/context/start_time/value as dateCompositionSubmitted,\\n\"+\r\n              \"c/uid/value as compositionUid, \\n\"+\r\n              \"c/composer/name as creator,\\n\"+\r\n              \"h/items[at0024]/value/value as analyteName, \\n\" +\r\n              \"h/items[at0024]/value/defining_code/code_string as analyteCode, \\n\" +\r\n              \"h/items[at0001]/value/magnitude as analyteMagnitude, \\n\" +\r\n              \"h/items[at0001]/value/units as analyteUnits, \\n\" +\r\n              \"c/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1]/data[at0001]/events[at0002]/data[at0003]/items[openEHR-EHR-CLUSTER.specimen.v1]/items[at0015]/value/value as specimenDateTimeCollected, \\n\" +\r\n              \"c/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1]/data[at0001]/events[at0002]/data[at0003]/items[openEHR-EHR-CLUSTER.laboratory_test_analyte.v1]/items[at0001]/value/normal_status/code_string as analyteNormalStatusCode, \\n\" +\r\n              \"c/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1]/data[at0001]/events[at0002]/data[at0003]/items[openEHR-EHR-CLUSTER.laboratory_test_analyte.v1]/items[at0001]/value/normal_range/lower_included AS analyteResultValue_normalRangeLowerIncluded, \\n\" +\r\n              \"c/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1]/data[at0001]/events[at0002]/data[at0003]/items[openEHR-EHR-CLUSTER.laboratory_test_analyte.v1]/items[at0001]/value/normal_range/upper_included AS analyteResultValue_normalRangeUpperIncluded, \\n\" +\r\n              \"h/items[at0001]/value/normal_range/lower/magnitude as analyteResultValue_ReferenceRangeLowerValue, \\n\" +\r\n              \"h/items[at0001]/value/normal_range/lower/units as analyteResultValue_ReferenceRangeLowerUnits, \\n\" +\r\n              \"h/items[at0001]/value/normal_range/upper/magnitude as analyteResultValue_ReferenceRangeUpperValue, \\n\" +\r\n              \"h/items[at0001]/value/normal_range/upper/units as analyteResultValue_ReferenceRangeUpperUnits \\n\" +\r\n              \"FROM EHR e [ehr_id/value=:ehrId]\\n\"+\r\n              \"CONTAINS COMPOSITION c \\n\" +\r\n              \"CONTAINS CLUSTER h[openEHR-EHR-CLUSTER.laboratory_test_analyte.v1] \\n\" +\r\n              \"WHERE c/archetype_details/template_id/value = 'Laboratory test report' and h/items[at0024]/value/defining_code/code_string MATCHES {'BLDSG'} \\n\" +\r\n              (typeof (ctx.vars.dateFrom) === \"undefined\" || ctx.vars.dateFrom === null ? '' : ' AND dateCompositionSubmitted >= :dateFrom') +\r\n              (typeof (ctx.vars.dateTo) === \"undefined\" || ctx.vars.dateTo === null ? '' : ' AND dateCompositionSubmitted <= :dateTo') +\r\n                \"\\n\"+\r\n              \"ORDER BY specimenDateTimeCollected DESC \\n\" +\r\n              \"OFFSET 0 LIMIT 6\",\r\n                initvalue: [],\r\n                params: ctx.vars,\r\n             callback: function(out, result) {\r\n                out.push(result);\r\n            }\r\n        })\r\n    };\r\n\r\n    function mapValueStatusToClass(value, range) {\r\n        if (value === null || value === undefined) {\r\n            return;\r\n        }\r\n        return ((range.lowerIncluded ? value < range.minValue : value <= range.minValue) ||\r\n            (range.upperIncluded ? value > range.maxValue : value >= range.maxValue)) ? 'hr' : 'lr';\r\n    }\r\n\r\n    function evaluate(assessment, prevAssessment) {\r\n        var riskClass, riskText, referenceRange, trendIcon, trendDescription;\r\n        if (prevAssessment && prevAssessment.analyteMagnitude && assessment.analyteMagnitude !== prevAssessment.analyteMagnitude) {\r\n            trendIcon = assessment.analyteMagnitude > prevAssessment.analyteMagnitude ? 'trend-up' : 'trend-down';\r\n            trendDescription = assessment.analyteMagnitude > prevAssessment.analyteMagnitude ? 'Value increased' : 'Value decreased';\r\n        }\r\n        var rangeMinValue, rangeMaxValue, rangeLowerIncluded, rangeUpperIncluded;\r\n        if (assessment.analyteResultValue_ReferenceRangeLowerValue !== null) {\r\n          rangeMinValue = assessment.analyteResultValue_ReferenceRangeLowerValue;\r\n        } else if (assessment.analyteResultNumerator_ReferenceRangeLower !== null) {\r\n          rangeMinValue = assessment.analyteResultNumerator_ReferenceRangeLower;\r\n        }\r\n        if (assessment.analyteResultValue_ReferenceRangeUpperValue !== null) {\r\n          rangeMaxValue = assessment.analyteResultValue_ReferenceRangeUpperValue;\r\n        } else if (assessment.analyteResultNumerator_ReferenceRangeUpper !== null) {\r\n          rangeMaxValue = assessment.analyteResultNumerator_ReferenceRangeUpper;\r\n        }\r\n        if (assessment.analyteResultValue_normalRangeLowerIncluded !== null) {\r\n          rangeLowerIncluded = assessment.analyteResultValue_normalRangeLowerIncluded;\r\n        }\r\n        if (assessment.analyteResultValue_normalRangeUpperIncluded !== null) {\r\n          rangeUpperIncluded = assessment.analyteResultValue_normalRangeUpperIncluded\r\n        }\r\n        var range = {\r\n            minValue: rangeMinValue,\r\n            lowerIncluded: rangeLowerIncluded,\r\n            maxValue: rangeMaxValue,\r\n            upperIncluded: rangeUpperIncluded\r\n        }\r\n        var abnormalFlag;\r\n\r\n        if (assessment.analyteNormalStatusCode !== null && assessment.analyteNormalStatusCode !== undefined && assessment.analyteNormalStatusCode !== 'N') {\r\n            abnormalFlag = assessment.analyteNormalStatusCode;\r\n        }\r\n        return {\r\n            'compositionUid': (assessment.compositionUid.split(\"::\"))[0],\r\n            'value': assessment.analyteMagnitude !== null && assessment.analyteMagnitude !== undefined ? assessment.analyteMagnitude : 'Not entered',\r\n            'unit': assessment.analyteUnits,\r\n            'icon': trendIcon,\r\n            'class': mapValueStatusToClass(assessment.analyteMagnitude, range),\r\n            'abnormalFlag': abnormalFlag,\r\n            'iconDescription': trendDescription,\r\n            'range': range,\r\n            'date': assessment.specimenDateTimeCollected,\r\n            'composer': assessment.creator\r\n            // 'dateCreated': assessment.dateCompositionSubmitted,\r\n        };\r\n    }\r\n\r\n    function checkReferenceRanges(widget) {\r\n        var latestValue = widget.latestValue;\r\n        var historicValues = widget.historicValues;\r\n        if (!latestValue || !latestValue.range) {\r\n            return widget;\r\n        }\r\n        if (historicValues.length > 1) {\r\n            latestValue = setTrendIcon(latestValue, historicValues[1]);\r\n        }\r\n\r\n        var allRangesSame = true;\r\n\r\n        if (historicValues.length > 0) {\r\n            historicValues.forEach(function(historicValue) {\r\n                if (latestValue.range.minValue !== historicValue.range.minValue ||\r\n                    latestValue.range.maxValue !== historicValue.range.maxValue ||\r\n                    latestValue.range.lowerIncluded !== historicValue.range.lowerIncluded ||\r\n                    latestValue.range.upperIncluded !== historicValue.range.upperIncluded) {\r\n                    if (typeof latestValue.value !== 'string' && typeof historicValue.value !== 'string') {\r\n                        allRangesSame = false;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        if (allRangesSame) {\r\n            widget.range = getLatestRange(latestValue, historicValues);\r\n             /*\r\n            widget.latestValue.range = {minValue: null, maxValue: null};\r\n            widget.historicValues = widget.historicValues.map(function(historicValue) {\r\n              historicValue.range = {minValue: null, maxValue: null};\r\n              return historicValue;\r\n            });\r\n            */\r\n        } else {\r\n            widget.range = getLatestRange(latestValue, historicValues);\r\n            widget.warning = 'Different ref. ranges';\r\n            widget.warningIcon = 'triangle-exclamation text-danger';\r\n        }\r\n        return widget\r\n    }\r\n\r\n    function getLatestRange(latestValue, historicValues) {\r\n        if (((latestValue.range.minValue !== null && latestValue.range.minValue !== undefined) || (latestValue.range.maxValue !== null && latestValue.range.maxValue !== undefined)) && typeof latestValue.value === 'number') {\r\n            return {\r\n                minValue: latestValue.range.minValue, \r\n                lowerIncluded: latestValue.range.lowerIncluded,\r\n                maxValue: latestValue.range.maxValue,\r\n                upperIncluded: latestValue.range.upperIncluded};\r\n        } else if (historicValues.length > 0) {\r\n  \r\n          var historicValueWithRange = null;\r\n          historicValues.forEach(function(historicValue) {\r\n            if (historicValueWithRange === null && (historicValue.range.minValue !== null && historicValue.range.minValue !== undefined) || (historicValue.range.maxValue !== null && historicValue.range.maxValue !== undefined)) {\r\n              historicValueWithRange = historicValue;\r\n            }\r\n          });\r\n          return historicValueWithRange ? {minValue: historicValueWithRange.range.minValue,\r\n            lowerIncluded: latestValue.range.lowerIncluded,\r\n            maxValue: historicValueWithRange.range.maxValue,\r\n            upperIncluded: latestValue.range.upperIncluded}: {minValue: null, maxValue: null};\r\n        }\r\n      }\r\n\r\n    function setTrendIcon(latestValue, historicValue) {\r\n        if (latestValue !== null && latestValue.value !== null && historicValue !== null &&  historicValue.value !== null) {\r\n          if (latestValue.value > historicValue.value) {\r\n              latestValue.trendIcon = 'trend-up';\r\n              latestValue.trendIconDescription = 'Value increased';\r\n          } else if (latestValue.value < historicValue.value) {\r\n              latestValue.trendIcon = 'trend-down';\r\n              latestValue.trendIconDescription = 'Value decreased';\r\n          } else {\r\n              latestValue.trendIcon = null;\r\n          }\r\n        }\r\n        return latestValue;\r\n      }\r\n\r\n    var latestValue;\r\n    var historicValues = [];\r\n    Ehr.allhash(promises, function(res) {\r\n        if (res['bloodGlucose'] == null || res['bloodGlucose'].length == 0) {\r\n            latestValue = null;\r\n        } else {\r\n            if (res['bloodGlucose'].length > 1) {\r\n                latestValue = evaluate(res['bloodGlucose'][0], res['bloodGlucose'][1]);\r\n            } else if (res['bloodGlucose'].length === 1) {\r\n                latestValue = evaluate(res['bloodGlucose'][0]);\r\n            }\r\n            historicValues = res['bloodGlucose'];\r\n             historicValues = historicValues.map(function(historicVal, index) {\r\n                return evaluate(historicVal);\r\n            }).slice(0, 6); // Wrap this in try-catch\r\n        }\r\n    });\r\n\r\n    var moreButtonUrl = null;\r\n    var clickUrl = null;\r\n    var widgetRange = null;\r\n\r\n    var widget = {\r\n        'widgetType': 'SINGLE_PARAMETER',\r\n        'titleShort': 'Blood Glucose POCT',\r\n        'titleLong': 'Blood Glucose POCT',\r\n        'iconSrc': null,\r\n        'moreButtonUrl': moreButtonUrl,\r\n        'clickUrl': clickUrl,\r\n        'latestValue': latestValue,\r\n        'range': widgetRange,\r\n        'historicValues': historicValues\r\n    };\r\n\r\n    widget = checkReferenceRanges(widget);\r\n\r\n    return widget;\r\n}\r\n"}]}