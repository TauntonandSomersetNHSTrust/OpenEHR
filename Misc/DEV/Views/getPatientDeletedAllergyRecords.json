{"name":"getPatientDeletedAllergyRecords","category":"view","description":"Retrieves deleted allergy entries for audit purposes","metaData":"{\r\n    \"parameters\": []\r\n}","steps":[{"processorName":"js","processorData":"// EHR View - getPatientDeletedAllergyRecords v1.2.0\r\n// Part of Allergies module v1.2.0\r\n// Requires template: Adverse Reaction List.v1 (SEM_VER:1.1.0, please check template metadata)\r\n// This view requires enabled querying by tags\r\n\r\nfunction compute(ctx, src)\r\n{\r\n    var compositionUid = findLatestCompositionUid();\r\n    return !compositionUid ? {\r\n        allergies: [],\r\n        createTimeStamp: null,\r\n        ehrId: ctx.vars.ehrId,\r\n        status: \"NOT_CHECKED\"\r\n    } : loadAllergiesFromComposition(compositionUid);\r\n\r\n    function loadAllergiesFromComposition(compositionUid) {\r\n        var promises = {\r\n            allergyRecord: Ehr.query({\r\n                aql: \"SELECT TOP 100 c/context/start_time/value as lastUpdatedTime, \\n\" +\r\n                    \"c/uid/value as compositionId, \\n\" +\r\n                    \"c/composer/name as composerName, \\n\" +\r\n                    \"c/composer/external_ref/id/value as composerId, \\n\" +\r\n                    \"r/provider/name as informedBy, \\n\" +\r\n                    \"r/data[at0001]/items[at0129]/value/value as deletedReasonOfRemoval, \\n\" +\r\n                    \"r/data[at0001]/items[at0130]/value/value as deletedDateTimeOfRemoval, \\n\" +\r\n                    \"r/data[at0001]/items[at0002,'Causative agent']/value/value as deletedAllergenValue, \\n\" +\r\n                    \"r/data[at0001]/items[at0002,'Causative agent']/value/defining_code/code_string as deletedAllergenCode, \\n\" +\r\n                    \"r/data[at0001]/items[at0063]/value/value as deletedAllergenStatusValue, \\n\" +\r\n                    \"r/data[at0001]/items[at0063]/value/defining_code/code_string as deletedAllergenStatusCode, \\n\" +\r\n                    \"r/data[at0001]/items[at0006]/value/value as deletedEntriesComment, \\n\" +\r\n                    \"r/data[at0001]/items[at0101]/value/value as deletedAllergenCriticalityValue, \\n\" +\r\n                    \"r/data[at0001]/items[at0101]/value/defining_code/code_string as deletedAllergenCriticalityCode, \\n\" +\r\n                    \"r/data[at0001]/items[at0117]/value/value as deletedLastOnsetOfReaction, \\n\" +\r\n                    \"r/data[at0001]/items[at0131]/value/value as authorOfRemoval, \\n\" +\r\n                    \"squash(r/data[at0001]/items[at0009,'Reaction details']/items[at0011]/value/value) as deletedManifestationsValue, \\n\" +\r\n                    \"squash(r/data[at0001]/items[at0009,'Reaction details']/items[at0011]/value/defining_code/code_string) as deletedManifestationsCode \\n\" +\r\n                    \"FROM EHR e [ehr_id/value=:ehrId] \\n\" +\r\n                    \"CONTAINS COMPOSITION c [openEHR-EHR-COMPOSITION.adverse_reaction_list.v1] \\n\" +\r\n                    \"CONTAINS (EVALUATION a[openEHR-EHR-EVALUATION.adverse_reaction_risk.v1] OR \\n\" +\r\n                    \"EVALUATION a_b[openEHR-EHR-EVALUATION.exclusion_global.v1] OR \\n\" +\r\n                    \"EVALUATION a_c[openEHR-EHR-EVALUATION.absence.v1] OR \\n\" +\r\n                    \"CLUSTER z[openEHR-EHR-CLUSTER.merge_status.v0] OR \\n\" +\r\n                    \"ADMIN_ENTRY r[openEHR-EHR-ADMIN_ENTRY.adverse_reaction_risk_deleted_entries.v0]) \\n\" +\r\n                    \"WHERE c/name/value='Adverse Reaction List' AND c/uid/value =:compositionUid \\n\" +\r\n                    \"ORDER BY c/context/start_time DESC \\n\",\r\n                initvalue: [],\r\n                params: {\r\n                    ehrId: ctx.vars.ehrId,\r\n                    compositionUid: compositionUid\r\n\r\n                },\r\n                callback: function(out, allergyRecord) {\r\n                    out.push({\r\n                        lastUpdatedTime: allergyRecord.lastUpdatedTime,\r\n                        composerName: allergyRecord.composerName,\r\n                        composerId: allergyRecord.composerId,\r\n                        compositionId: allergyRecord.compositionId,\r\n                        allergenName: allergyRecord.deletedAllergenValue,\r\n                        allergenCode: allergyRecord.deletedAllergenCode,\r\n                        statusCode: allergyRecord.deletedAllergenStatusCode,\r\n                        statusValue: allergyRecord.deletedAllergenStatusValue,\r\n                        criticalityCode: allergyRecord.deletedAllergenCriticalityCode,\r\n                        criticalityValue: allergyRecord.deletedAllergenCriticalityValue,\r\n                        lastOnsetOfReaction: allergyRecord.deletedLastOnsetOfReaction,\r\n                        manifestationValues: allergyRecord.deletedManifestationsValue,\r\n                        manifestationCodes: allergyRecord.deletedManifestationsCode,\r\n                        authorOfRemoval: allergyRecord.authorOfRemoval,\r\n                        reasonOfRemoval: allergyRecord.deletedReasonOfRemoval,\r\n                        timeOfRemoval: allergyRecord.deletedDateTimeOfRemoval,\r\n                        informedBy: allergyRecord.informedBy,\r\n                        comment: allergyRecord.deletedEntriesComment\r\n                    });\r\n                }\r\n            })\r\n        };\r\n        output = {};\r\n        Ehr.allhash(promises, function(res) {\r\n            var allergyRecords = res.allergyRecord;\r\n            var firstRecord = allergyRecords[0] || {};\r\n            var lastUpdatedTime = firstRecord.lastUpdatedTime;\r\n            var containsAllergies = !!firstRecord.allergenName;\r\n            var composerName = firstRecord.composerName;\r\n            var composerId = firstRecord.composerId;\r\n\r\n            output.allergies = [];\r\n            output.createTimeStamp = lastUpdatedTime;\r\n            output.ehrId = ctx.vars.ehrId;\r\n            output.composerName = composerName;\r\n            output.composerId = composerId;\r\n            output.compositionId = firstRecord.compositionId;\r\n            if (containsAllergies)\r\n            {\r\n                for (var i = 0; i < allergyRecords.length; i++)\r\n                {\r\n                    var reactions = [];\r\n                    if (allergyRecords[i].manifestationValues) {\r\n                        for (var j = 0; j < allergyRecords[i].manifestationValues.length; j++) {\r\n                            if (allergyRecords[i].manifestationValues[j]) {\r\n                            reactions.push({description: allergyRecords[i].manifestationValues[j],\r\n                                            code: allergyRecords[i].manifestationCodes[j]});\r\n                            }\r\n                        }\r\n                    }\r\n                    if (!allergyRecords[i].allergenCode || !allergyRecords[i].allergenName) {\r\n                        continue;\r\n                    }\r\n                    output.allergies.push({\r\n                        allergen: {\r\n                            code: allergyRecords[i].allergenCode,\r\n                            name: allergyRecords[i].allergenName\r\n                        },\r\n                        dateOfRemoval: allergyRecords[i].timeOfRemoval,\r\n                        removalReason: allergyRecords[i].reasonOfRemoval,\r\n                        criticality: {code: allergyRecords[i].criticalityCode, value: allergyRecords[i].criticalityValue},\r\n                        informedBy: allergyRecords[i].informedBy,\r\n                        lastOnsetOfReaction: allergyRecords[i].lastOnsetOfReaction,\r\n                        reaction: reactions,\r\n                        comment: allergyRecords[i].comment,\r\n                        removedBy: allergyRecords[i].authorOfRemoval,\r\n                        status: {code: allergyRecords[i].statusCode, value: allergyRecords[i].statusValue}\r\n                    });\r\n                }\r\n            }\r\n        });\r\n        return output;\r\n    }\r\n\r\n    function findLatestCompositionUid() {\r\n    var promises = {\r\n      allergyRecord: Ehr.query({\r\n        aql: \"SELECT TOP 1\" +\r\n            \" c/uid/value as compositionUid\" +\r\n            \" FROM EHR[ehr_id/value='\" + ctx.vars.ehrId + \"']\" +\r\n            \" CONTAINS COMPOSITION c\" +\r\n            \" WHERE c/name/value = 'Adverse Reaction List' \" +\r\n            \" ORDER BY c/context/start_time DESC\",\r\n        initvalue: [],\r\n        params: ctx.vars,\r\n        callback: function(out, allergyRecord) {\r\n          out.push({\r\n            \"compositionUid\": allergyRecord[\"compositionUid\"]\r\n          });\r\n        }\r\n      })\r\n    };\r\n\r\n    var result = \"\";\r\n    Ehr.allhash(promises, function(res) {\r\n      if (!!res.allergyRecord[0])\r\n      {\r\n        result = res.allergyRecord[0].compositionUid;\r\n      }\r\n    });\r\n\r\n    return result\r\n  }\r\n}\r\n"}]}