{"name":"PBIDashboards::MUST_TOP1","category":"view","description":"MRN and datetime of last completed MUST form per MRN (DEPRECATED) (11-12-2020)","metaData":"{\r\n    \"parameters\": [\r\n        {\r\n            \"name\": \"last_x_days\",\r\n            \"description\": \"The last X days to show, or 30 if null\",\r\n            \"type\": \"string\"\r\n        }\r\n    ]\r\n}","steps":[{"processorName":"js","processorData":"// DEPRECATED! see PBIDashboards::MUST\r\n\r\nvar fromDate = \"<replace_date>\";\r\nvar formName = \"Malnutrition universal screening tool\";\r\n\t\r\nvar only_completed = \"SELECT c/uid/value as cuid, \" +\r\n       \"c/context/start_time/value as completed, \" +\r\n       \"e/ehr_status/subject/external_ref/id/value as mrn, \" +\r\n       \"l/data[at0001]/events[at0002]/data[at0003]/items[at0004]/value/symbol/value as bmi_score, \" +\r\n       \"l/data[at0001]/events[at0002]/data[at0003]/items[at0008]/value/symbol/value as weight_loss_score, \" +\r\n       \"l/data[at0001]/events[at0002]/data[at0003]/items[at0012]/value/symbol/value as niade_score, \" +\r\n       \"l/data[at0001]/events[at0002]/data[at0003]/items[at0015]/value/magnitude as total_score, \" +\r\n\t   \"l/data[at0001]/events[at0002]/data[at0003]/items[at0016]/value/value as risk \" +\r\n\"FROM EHR e  \" +\r\n\"CONTAINS TOP 1 COMPOSITION c[openEHR-EHR-COMPOSITION.encounter.v1]  \" +\r\n\"CONTAINS OBSERVATION l[openEHR-EHR-OBSERVATION.must.v0]  \" +\r\n\"WHERE c/name/value = '\" + formName + \"' \" + \r\n\"AND completed > '\" + fromDate + \"' \" +\r\n\t\"ORDER BY c/context/start_time/value DESC  \" +\r\n\t\"LIMIT 1000\";\r\n\r\nfunction compute(ctx, src) {\r\n\tvar x = ctx.vars.last_x_days;\r\n\tif(!x || x == \"\") {\r\n\t\tx = ctx.vars.last_x_days = 30;\r\n\t}\r\n\r\n\tvar d = new Date();\r\n\tvar theLongLongAgo = new Date(d.setDate(d.getDate() - x));\r\n\tctx.vars.from_date = theLongLongAgo.toISOString();\r\n\t\r\n\tvar query = only_completed.replace(fromDate, ctx.vars.from_date);\r\n\t\r\n\tvar promises = {\r\n        forms: Ehr.query({\r\n\t\t\taql: query,\r\n\t\t\tparams: ctx.vars,\r\n\t\t\tinitvalue: [],\r\n\t\t\tcallback: function (out, form) {\r\n\t\t\t\tout.push({\r\n\t\t\t\t\t\t\"form_name\": formName,\r\n\t\t\t\t\t\t\"form_id\": form.cuid,\r\n\t\t\t\t\t\t\"recorded_date\": form.completed,\r\n\t\t\t\t\t\t\"patient_mrn\": form.mrn,\r\n\t\t\t\t\t\t\"scores\": {\r\n\t\t\t\t\t\t\t\"bmi\": form.bmi_score,\r\n\t\t\t\t\t\t\t\"weight_loss\": form.weight_loss_score,\r\n\t\t\t\t\t\t\t\"niades\": form.niade_score,\r\n\t\t\t\t\t\t\t\"total\": form.total_score\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"risk\": form.risk\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t})\r\n\t};\r\n\r\n    var result = {};\r\n\ttry {\r\n\t\tEhr.allhash(promises, function (res) {\r\n\t\t\tresult = res['forms'];\r\n\t\t\tresult.params = res['params'];\r\n\t\t});\r\n\t} catch(ex) {\r\n\t\tresult = {\r\n\t\t\texception: ex\r\n\t\t};\r\n\t}\r\n    \r\n    return result;\r\n}"}]}