{"name":"taunton-integration::pain","category":"view","description":null,"metaData":"{\n    \"parameters\": []\n}","steps":[{"processorName":"js","processorData":"// 460725ed-90bf-48cd-931e-35fa18288d6e\nfunction compute(ctx, src) {\n    var promises = {\n        pain: Ehr.query({\n            aql: \"SELECT \" +\n                \"a_j/data[at0001]/events[at0002]/data[at0003]/items[at0004]/value/magnitude as painMovementScore, \" +\n                \"a_j/data[at0001]/events[at0002]/data[at0003]/items[at0006]/value/value as painMovementScoreInterpretation, \" +\n                \"a_j/data[at0001]/events[at0002]/data[at0003]/items[at0006]/value/defining_code/code_string as painMovementScoreInterpretationCode, \" +\n                \"a_j/data[at0001]/events[at0002]/time/value as painMovementTime, \" +\n                \"a_j/data[at0001]/events[at0002]/data[at0003]/items[at0004]/null_flavour as painMovementNullFlavour, \" +\n                \"a/name/value as templateName, \" +\n                \"a/archetype_details/template_id/value as templateId, \" +\n                \"a/uid/value as compositionUid, \" +\n                \"a/context/start_time/value as dateCompositionSubmitted, \" +\n                \"a/composer/name as composer \\n\" +\n                \"FROM EHR e[ehr_id/value=:ehrId] \\n\" +\n                \"CONTAINS COMPOSITION a \" +\n                \"CONTAINS OBSERVATION a_j[openEHR-EHR-OBSERVATION.movement_pain.v0] \\n\" +\n                \"WHERE templateId='NEWS2 UK' \\n\" +\n                \"ORDER BY dateCompositionSubmitted DESC \\n\" +\n                \"offset 0 limit 100 \",\n            initvalue: [],\n            params: {\n              ehrId: ctx.vars.ehrId,\n            },\n             callback: function(out, result) {\n                out.push(result);\n            }\n        })\n    };\n   function evaluate(assessment, prevAssessment) {\n        var riskClass, riskText, referenceRange, icon;\n        if (!assessment) {\n            return null;\n        }\n        if (assessment.painMovementScore !== null && assessment.painMovementScore !== undefined\n         && prevAssessment && prevAssessment.painMovementScore !== null && prevAssessment.painMovementScore !== undefined) {\n            if (assessment.painMovementScore !==  prevAssessment.painMovementScore) {\n                icon = assessment.painMovementScore > prevAssessment.painMovementScore ? 'trend-up' : 'trend-down';\n            }\n        }\n        switch (assessment.painMovementScore) {\n            case 0:\n                riskClass = 'lr';\n                break;\n            case 1:\n                riskClass = 'lmr';\n                break;\n            case 2:\n                riskClass = 'mr';\n                break;\n            case 3: \n                riskClass = 'hr';\n                break;\n        }\n\n        return {\n            'compositionUid': (assessment.compositionUid.split(\"::\"))[0],\n            'value': assessment.painMovementScore >= 0 ? assessment.painMovementScore : 'Value not entered',\n            'sparklineLevel': assessment.painMovementScore >= 0 ? assessment.painMovementScore : null,\n            'riskText': assessment.painMovementScoreInterpretation,\n            'composer': assessment.composer,\n            'class': riskClass,\n            'icon': icon,\n            'date': assessment.dateCompositionSubmitted\n        };\n    }\n\n    var latestValue, historicValues;\n    Ehr.allhash(promises, function (res) {\n       if (res['pain'] == null || res['pain'].length == 0) {\n            latestValue = null;\n        } else {\n            if (res['pain'].length > 1) {\n                latestValue = evaluate(res['pain'][0], res['pain'][1]);\n            } else {\n                latestValue = evaluate(res['pain'][0]);\n            }\n            // res['waterlowAssessment'].shift();\n            historicValues = res['pain'];\n            historicValues = historicValues.map(evaluate).slice(1, 6); // Wrap this in try-catch\n            historicValues.unshift(latestValue);\n        }\n    });\n\n     return latestValue? {\n        'widgetType': 'RISK_STAGE',    // RISK_STAGE | LIST_OF_FORMS | SINGLE_PARAMETER;\n        'riskStageType': 'SCORE',\n        'titleShort': 'Pain',\n        'titleLong': 'Pain on movement',\n        'iconSrc': null,\n         'sparkline': {\n            levels: 4,\n            normalLevel: 0\n        },\n        'moreButtonUrl': null,\n        'clickUrl': null,\n        'latestValue': latestValue,\n        'historicValues': historicValues\n    } : null;\n}"}]}