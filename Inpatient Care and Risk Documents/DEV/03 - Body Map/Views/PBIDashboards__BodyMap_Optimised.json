{"name":"PBIDashboards::BodyMap_Optimised","category":"view","description":"MRN and completion datetime of most recent BodyMap per MRN (17-06-2021)","metaData":"{\r\n    \"parameters\": [\r\n        {\r\n            \"name\": \"last_x_days\",\r\n            \"description\": \"The last X days to show, or 365 if null\",\r\n            \"type\": \"string\"\r\n        },\r\n        {\r\n            \"name\": \"return_variables\",\r\n            \"description\": \"Returns an objects of all the variables in ctx.vars (including this one) and passed to AQL. Useful for debugging.\",\r\n            \"type\": \"boolean\"\r\n        }\r\n    ]\r\n}","steps":[{"processorName":"js","processorData":"// v1.0.0 - Haydn Williams - original\r\n// v1.0.1 - Haydn Williams - refactor to avoid bug using TOP 1 Composition\r\n// v1.0.2 - Haydn Williams - Increased default last_x_days to 365 and added global parameter\r\n// v1.0.3 - Haydn Williams - Better advised optimisations to AQL\r\n\r\nvar ehrIDReplace = \"<ehrid>\";\r\n\r\nvar replaceMe = \"<replace_date>\";\r\nvar cuid = \"<replace_cuid>\";\r\nvar formName = \"Body Map\";\r\nvar tst_debug = false;\r\nvar LASTXDAYS = 365;\r\n\r\nvar getRecentCompositionsAQL = \"select DISTINCT e/ehr_id/value as ehr_id \" +\r\n\t\"FROM EHR e  \" +\r\n\t\"CONTAINS COMPOSITION c[openEHR-EHR-COMPOSITION.encounter.v1]   \" +\r\n\t\"WHERE c/name/value = '\" + formName + \"' \" + \r\n\t\"AND c/context/start_time/value > '\" + replaceMe + \"' \" +\r\n\t\"ORDER BY c/context/start_time/value DESC \" + \r\n\t\"LIMIT 1000000000\";\r\n\r\nvar getLatestFormDataAQL = \"SELECT c/uid/value as cuid, \" +\r\n       \"c/context/start_time/value as completed, \" +\r\n       \"e/ehr_status/subject/external_ref/id/value as mrn \" +\r\n\t\"FROM EHR e  \" +\r\n\t\"CONTAINS COMPOSITION c[openEHR-EHR-COMPOSITION.encounter.v1]   \" +\r\n\t\"WHERE c/name/value = '\" + formName + \"' \" + \r\n\t\"AND e/ehr_id/value = '\" + ehrIDReplace + \"' \" +\r\n\t\"ORDER BY c/context/start_time/value DESC \" + \r\n\t\"LIMIT 1\";\r\n\r\nvar get_comment_count = \"SELECT COUNT(c/content[openEHR-EHR-CLUSTER.body_part_observation.v0]/items[at0009]/items[at0002]/value) as comment_count \" +\r\n\t\"FROM EHR e \" +\r\n\t\"CONTAINS COMPOSITION c[openEHR-EHR-COMPOSITION.encounter.v1] \" +\r\n\t\"WHERE e/ehr_id/value = '\" + ehrIDReplace + \"' \" +\r\n\t\"And c/uid/value = '\" + cuid + \"' \" +\r\n\t\"LIMIT 1\";\t\r\n\t\r\nfunction generateEhrQuery(aql, params) {\r\n    return Ehr.query({\r\n        aql: aql,\r\n        initvalue: [],\r\n        params: params,\r\n        callback: function(out, result) {\r\n            out.push(result);\r\n        }\r\n    });\r\n}\t\r\n\t\r\nfunction getFromDate(ctx) {\r\n\tvar x = LASTXDAYS;\r\n\tif(ctx && ctx.vars){\r\n\t\tx = ctx.vars.last_x_days;\r\n\t\tif(!x || x == \"\") {\r\n\t\t\tx = ctx.vars.last_x_days = LASTXDAYS;\r\n\t\t}\r\n\t}\r\n\t\r\n\tvar oldDate = null;\r\n\tvar d = new Date();\r\n\toldDate = new Date(d.setDate(d.getDate() - x));\r\n\treturn oldDate.toISOString();\r\n}\r\n\r\nfunction build_cuid_query(new_cuid, ehrid) {\r\n\treturn {\r\n\t\tforms: Ehr.query({\r\n\t\t\taql: get_comment_count.replace(cuid, new_cuid).replace(ehrIDReplace, ehrid),\r\n\t\t\tparams: {},\r\n\t\t\tinitvalue: [],\r\n\t\t\tcallback: function (out, form) {\r\n\t\t\t\tif(form) {\r\n\t\t\t\t\tout.push({\r\n\t\t\t\t\t\t\"count\": (form == null || form.comment_count == null) ? 0 : form.comment_count\r\n\t\t\t\t\t});\r\n\t\t\t\t}\t\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction getLatestComposition(ehr_id) {\r\n\tvar forms = {};\r\n\tvar promises = {\r\n\t\tcomposition: generateEhrQuery(\r\n\t\t\tgetLatestFormDataAQL.replace(ehrIDReplace, ehr_id), \r\n\t\t\t{}\r\n\t\t)\r\n\t};\r\n\tEhr.allhash(promises, function (res) {\r\n\t\tvar form = res.composition[0];\r\n\t\tforms = {\r\n\t\t\t\"ehr_id\": ehr_id,\r\n\t\t\t\"form_name\": formName,\r\n\t\t\t\"form_id\": form.cuid,\r\n\t\t\t\"recorded_date\": form.completed,\r\n\t\t\t\"patient_mrn\": form.mrn\r\n\t\t};\r\n\t});\r\n\treturn forms;\r\n}\r\n\t\r\nfunction getRecentCompositions(ctx) {\r\n\tvar fromDate = ''\r\n\tvar dateException = null;\r\n\t\r\n\ttry {\r\n\t\tfromDate = ctx.vars.from_date = getFromDate(ctx);\r\n\t} catch(ex) {\r\n\t\tdateException = ex;\r\n\t}\r\n\t\r\n\ttst_debug = ctx.vars.return_variables == null ? false : ctx.vars.return_variables;\r\n\t\r\n\tvar query = getRecentCompositionsAQL.replace(replaceMe, fromDate);\r\n\r\n\tvar forms = [];\r\n\tvar promises = {\r\n\t\tcompositions: generateEhrQuery(query, {})\r\n\t};\r\n\t\r\n\ttry {\r\n\t\tEhr.allhash(promises, function (res) {\r\n\t\t\tfor(var i = 0; i < res.compositions.length; i++) {\r\n\t\t\t\tif(res.compositions[i].ehr_id) {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tvar comp = getLatestComposition(res.compositions[i].ehr_id);\r\n\t\t\t\t\t\tif(comp) {\r\n\t\t\t\t\t\t\tforms.push(comp);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} catch(ex) {\r\n\t\t\t\t\t\tforms.push({\r\n\t\t\t\t\t\t\tmessage: 'Exception in second call',\r\n\t\t\t\t\t\t\tehr_id: res.compositions[i].ehr_id,\r\n\t\t\t\t\t\t\texception: ex.message\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tvar parseISOString = function(s) {\r\n\t\t  var b = s.split(/\\D+/);\r\n\t\t  return new Date(Date.UTC(b[0], --b[1], b[2], b[3], b[4], b[5], b[6]));\r\n\t\t};\r\n\t\t\r\n\t\tforms.sort(function(a,b) {\t\t\t\r\n\t\t\tvar da = parseISOString(a.recorded_date).getTime();\r\n\t\t\tvar db = parseISOString(b.recorded_date).getTime();\r\n\t\t\t\r\n\t\t\treturn db-da; // reverse sort\r\n\t\t});\r\n\t} catch(ex) {\r\n\t\tforms.push({\r\n\t\t\tmessage: 'Exception in first call',\r\n\t\t\tdate_from: fromDate,\r\n\t\t\tquery: query,\r\n\t\t\texception: ex.message\r\n\t\t});\r\n\t}\r\n\t\r\n\tfor(var i = 0; i < forms.length; i++) {\t\r\n\t\tEhr.allhash(build_cuid_query(forms[i].form_id, forms[i].ehr_id), function (res) {\r\n\t\t\tvar f = res['forms'];\r\n\t\t\tif(f && f.length > 0) {\r\n\t\t\t\tforms[i].comment_sum = f[0].count;\r\n\t\t\t} else {\r\n\t\t\t\tforms[i].comment = f;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\t\r\n\treturn forms;\r\n\t\r\n}\r\n\r\nfunction compute(ctx, src) {\r\n\treturn getRecentCompositions(ctx);\r\n}"}]}