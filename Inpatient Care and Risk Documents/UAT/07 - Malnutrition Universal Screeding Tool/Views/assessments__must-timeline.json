{"name":"assessments::must-timeline","category":"view","description":"MUST Assessment Timeline","metaData":"{\r\n  \"parameters\": [\r\n      {\r\n          \"name\": \"ehrId\",\r\n          \"type\": \"string\",\r\n          \"description\": \"Ehr id\"\r\n      },\r\n            {\r\n          \"name\": \"dateFrom\",\r\n          \"type\": \"string\",\r\n          \"description\": \"Date from\"\r\n      },\r\n            {\r\n          \"name\": \"dateTo\",\r\n          \"type\": \"string\",\r\n          \"description\": \"Date to\"\r\n      }\r\n  ]\r\n}","steps":[{"processorName":"js","processorData":"// Assessments MUST Timeline View v1.0.1\r\n// Template required: \"Malnutrition Universal Screening Tool\" v1.0.0\r\n\r\nfunction compute(ctx, src)\r\n{\r\n    var promises = {\r\n        mustAssessment: Ehr.query({\r\n            aql: \"select\\n\"+\r\n            \"    a/context/start_time/value as dateCompositionSubmitted,\\n\"+\r\n            \"    a/composer/name as creator,\\n\"+\r\n            \"    a/composer/external_ref/id/value as creatorId,\\n\"+\r\n            \"    a_a/data[at0001]/events[at0002]/data[at0003]/items[at0039]/value/value as evaluationPeriod,\\n\"+\r\n            \"    a_a/data[at0001]/origin/value as dateTime,\\n\"+\r\n\r\n            \"    a_b/data[at0001]/events[at0002]/data[at0003]/items[at0004]/value/magnitude as bmiValueMagnitude,\\n\"+\r\n            \"    a_b/data[at0001]/events[at0002]/data[at0003]/items[at0004]/value/units as bmiValueUnits,\\n\"+\r\n            \"    a_a/data[at0001]/events[at0002]/data[at0003]/items[at0004]/value/symbol/value as bmiValueScoreDescription,\\n\"+\r\n            \"    a_a/data[at0001]/events[at0002]/data[at0003]/items[at0004]/value/value as bmiValueScore,\\n\"+\r\n\r\n            \"    a/content[openEHR-EHR-SECTION.adhoc.v1,'Weight loss comparison']/items[openEHR-EHR-OBSERVATION.body_weight.v2,'Body weight 3 to 6 months ago']/data[at0002]/events[at0003,'Last 3 to 6 month ago']/data[at0001]/items[at0004]/value/magnitude as pastBodyWeight,\\n\"+\r\n            \"    a/content[openEHR-EHR-SECTION.adhoc.v1,'Weight loss comparison']/items[openEHR-EHR-OBSERVATION.body_weight.v2,'Body weight 3 to 6 months ago']/data[at0002]/events[at0003,'Last 3 to 6 month ago']/data[at0001]/items[at0004]/value/units as pastBodyWeightUnits,\\n\"+\r\n            \"    a/content[openEHR-EHR-SECTION.adhoc.v1,'Weight loss comparison']/items[openEHR-EHR-EVALUATION.absence.v2]/data[at0001]/items[at0002]/value,\\n\"+\r\n\r\n            \"    a_a/data[at0001]/events[at0002]/data[at0003]/items[at0008]/value/symbol/value as weightLossScoreDescription,\\n\"+\r\n            \"    a_a/data[at0001]/events[at0002]/data[at0003]/items[at0008]/value/value as weightLossScore,\\n\"+\r\n            \"    a_a/data[at0001]/events[at0002]/data[at0003]/items[at0012]/value/symbol/value as acuteDiseaseEffectScoreDescription,\\n\"+\r\n            \"    a_a/data[at0001]/events[at0002]/data[at0003]/items[at0012]/value/value as acuteDiseaseEffectScore,\\n\"+\r\n            \"    a_a/data[at0001]/events[at0002]/data[at0003]/items[at0015]/value/magnitude as mustTotalScore,\\n\"+\r\n            \"    a_a/data[at0001]/events[at0002]/data[at0003]/items[at0016]/value/value as mustRiskCategory,\\n\"+\r\n\r\n            \"    a/content[openEHR-EHR-OBSERVATION.body_weight.v2]/data[at0002]/events[at0003]/data[at0001]/items[at0004]/value/magnitude as bodyWeightMagnitude,\\n\"+\r\n            \"    a/content[openEHR-EHR-OBSERVATION.body_weight.v2]/data[at0002]/events[at0003]/data[at0001]/items[at0004]/value/units as bodyWeightUnit,\\n\"+\r\n            \"    b_b/data[at0001]/events[at0002]/data[at0003]/items[at0004]/value/magnitude as bodyHeight,\\n\"+\r\n            \"    b_b/data[at0001]/events[at0002]/data[at0003]/items[at0004]/value/units as bodyHeightUnits,\\n\"+\r\n            \r\n            \"    a/name/value as templateName,\\n\"+\r\n            \"    a/archetype_details/template_id/value as templateId,\\n\"+\r\n            \"    a/uid/value as compositionUid   \\n\"+\r\n            \"from EHR e [ehr_id/value=:ehrId]\\n\"+\r\n            \"contains COMPOSITION a\\n\"+\r\n            \"contains (\\n\"+\r\n            \"    OBSERVATION a_a[openEHR-EHR-OBSERVATION.must.v0] and \\n\" +\r\n            \"    OBSERVATION a_b[openEHR-EHR-OBSERVATION.body_mass_index.v2] and\\n\"+\r\n            \"    OBSERVATION b_b[openEHR-EHR-OBSERVATION.height.v2])\\n\"+\r\n            \"where \\n\" +\r\n            \"    a/name/value='Malnutrition universal screening tool'\\n\"+\r\n            (typeof (ctx.vars.dateFrom) === \"undefined\" || ctx.vars.dateFrom === null ? \r\n            '' : \r\n            '    AND dateCompositionSubmitted >= :dateFrom') +\r\n            (typeof (ctx.vars.dateTo) === \"undefined\" || ctx.vars.dateTo === null ? \r\n            '' : \r\n            '    AND dateCompositionSubmitted <= :dateTo') +\r\n            \"\\n\"+\r\n            \"order by dateCompositionSubmitted desc\\n\"+\r\n            \"\"\r\n            ,\r\n            initvalue: [],\r\n            params: ctx.vars,\r\n            callback: function(out, result) {\r\n                out.push(result);\r\n            }\r\n        })\r\n    };\r\n\r\n    // TimelineMeasurementGroup\r\n    function createMeasurementGroup(title, subtitle, icon, measurements) {\r\n        return {\r\n            \"title\": title,\r\n            \"subtitle\": subtitle,\r\n            // \"icon\": icon,\r\n            measurements: measurements\r\n        };\r\n    }\r\n    function addMeasurementToGroup(measurement, group) {\r\n        group['measurements'].push(measurement);\r\n    }\r\n    var tmgWeight = createMeasurementGroup(\"Weight\", \"(kg)\", null, []);\r\n    var tmgHeight = createMeasurementGroup(\"Height\", \"(cm)\", null, []);\r\n    var tmgBMI = createMeasurementGroup(\"BMI\", \"(kg/mÂ²)\", null, []);\r\n    var tmgBMIscore = createMeasurementGroup(\"BMI score\", \"(score)\", null, []);\r\n    var tmgWeightLoss = createMeasurementGroup(\"Weight loss\", \"(kg)\", null, []);\r\n    var tmgWeightLossScore = createMeasurementGroup(\"Weight loss score\", \"(score)\", null, []);\r\n    var tmgAcuteDiseaseScore = createMeasurementGroup(\"Acute disease score\", \"(score)\", null, []);\r\n\r\n    // TimelineMeasurement\r\n    function createTimelineMeasurement(compositionUid, value, unit, date) {\r\n        return {\r\n            compositionUid: compositionUid,\r\n            type: \"number\",\r\n            value: {\r\n                value: value,\r\n                unit: unit\r\n            },\r\n            date: date\r\n        };\r\n    }\r\n    function createTimelineEvaluationMeasurement(compositionUid, value, unit, date, class_, riskText, referenceRange) {\r\n        return {\r\n            compositionUid: compositionUid,\r\n            type: \"evaluation\",\r\n            value: {\r\n                value: value,\r\n                unit: unit\r\n            },\r\n            date: date,\r\n            \r\n            class: class_,\r\n            riskText: riskText,\r\n            referenceRange: referenceRange\r\n        };\r\n    }\r\n\r\n    // Add mocked measurements (for invalid EHR IDs)\r\n    /*\r\n    addMeasurementToGroup(createTimelineMeasurement(null, 80, \"kg\", \"2020-01-04\"), tmgWeight);\r\n    addMeasurementToGroup(createTimelineMeasurement(null, 85, \"kg\", \"2020-01-07\"), tmgWeight);\r\n    addMeasurementToGroup(createTimelineMeasurement(null, 90, \"kg\", \"2020-01-11\"), tmgWeight);\r\n    var tMeasurements = [\r\n        createTimelineEvaluationMeasurement(null, 3, null, \"2020-01-04\", \"hr\", null, null),\r\n        createTimelineEvaluationMeasurement(null, 3, null, \"2020-01-07\", \"hr\", null, null),\r\n        createTimelineEvaluationMeasurement(null, 3, null, \"2020-01-11\", \"hr\", null, null)\r\n    ];\r\n    */\r\n\r\n    function evaluateRoot(assessment) {\r\n        var riskClass, riskText, referenceRange;\r\n\r\n        if (assessment.mustTotalScore <= 0) {\r\n            riskClass = \"lr\";\r\n            riskText = \"Low risk\";\r\n            referenceRange = '= 0';\r\n        } else if (assessment.mustTotalScore <= 1) {\r\n            riskClass = \"mr\";\r\n            riskText = \"Medium risk\";\r\n            referenceRange = '= 1';\r\n        } else {\r\n            riskClass = \"vhr\";\r\n            riskText = \"High risk\";\r\n            referenceRange = '>= 2';\r\n        }\r\n\r\n        return {\r\n            'type': \"evaluation\",\r\n            'compositionUid': (assessment.compositionUid.split(\"::\"))[0],\r\n            'value': {\r\n                value: assessment.mustTotalScore\r\n            },\r\n            'date': assessment.dateCompositionSubmitted,\r\n            'class': riskClass,\r\n            'riskText': riskText,\r\n            'referenceRange': referenceRange\r\n        };\r\n    }\r\n\r\n    function evaluateWeight(assessment) {\r\n        var compositionUid = (assessment.compositionUid.split(\"::\"))[0];\r\n        return createTimelineMeasurement(compositionUid, assessment.bodyWeightMagnitude, 'kg', assessment.dateCompositionSubmitted);\r\n    }\r\n\r\n    function evaluateHeight(assessment) {\r\n        var compositionUid = (assessment.compositionUid.split(\"::\"))[0];\r\n        return createTimelineMeasurement(compositionUid, assessment.bodyHeight, 'cm', assessment.dateCompositionSubmitted);\r\n    }\r\n\r\n    function evaluateBMI(assessment) {\r\n        var compositionUid = (assessment.compositionUid.split(\"::\"))[0];\r\n        return createTimelineMeasurement(compositionUid, assessment.bmiValueMagnitude, 'kg', assessment.dateCompositionSubmitted);\r\n    }\r\n\r\n    function evaluateBMIScore(assessment) {\r\n        var compositionUid = (assessment.compositionUid.split(\"::\"))[0];\r\n        return createTimelineMeasurement(compositionUid, assessment.bmiValueScore, 'kg', assessment.dateCompositionSubmitted);\r\n    }\r\n\r\n    function evaluateWeightLoss(assessment) {\r\n        var compositionUid = (assessment.compositionUid.split(\"::\"))[0];\r\n        var pastBodyWeight = parseFloat(assessment.pastBodyWeight);\r\n        var currentBodyWeight = parseFloat(assessment.bodyWeightMagnitude);\r\n        var diff = \"UNK\";\r\n        if (pastBodyWeight && currentBodyWeight) {\r\n            diff = currentBodyWeight - pastBodyWeight;\r\n        }\r\n        return createTimelineMeasurement(compositionUid, diff, 'kg', assessment.dateCompositionSubmitted);\r\n    }\r\n\r\n    function evaluateWeightLossScore(assessment) {\r\n        var compositionUid = (assessment.compositionUid.split(\"::\"))[0];\r\n        return createTimelineMeasurement(compositionUid, assessment.weightLossScore, 'kg', assessment.dateCompositionSubmitted);\r\n    }\r\n\r\n    function evaluateAcuteDiseaseScore(assessment) {\r\n        var compositionUid = (assessment.compositionUid.split(\"::\"))[0];\r\n        return createTimelineMeasurement(compositionUid, assessment.acuteDiseaseEffectScore, 'kg', assessment.dateCompositionSubmitted);\r\n    }\r\n\r\n    // Add measurements to timeline and groups\r\n    Ehr.allhash(promises, function(res) {\r\n        if (res['mustAssessment'] == null || res['mustAssessment'].length == 0) {\r\n            tMeasurements = null;\r\n        } else {\r\n            // Filter out all null values: .filter(function (el) { return el != null; })\r\n            tMeasurements = res['mustAssessment'].map(evaluateRoot); // Wrap this in try-catch\r\n            tmgWeight['measurements'] = res['mustAssessment'].map(evaluateWeight);\r\n            tmgHeight['measurements'] = res['mustAssessment'].map(evaluateHeight);\r\n            tmgBMI['measurements'] = res['mustAssessment'].map(evaluateBMI);\r\n            tmgBMIscore['measurements'] = res['mustAssessment'].map(evaluateBMIScore);\r\n            tmgWeightLoss['measurements'] = res['mustAssessment'].map(evaluateWeightLoss);\r\n            tmgWeightLossScore['measurements'] = res['mustAssessment'].map(evaluateWeightLossScore);\r\n            tmgAcuteDiseaseScore['measurements'] = res['mustAssessment'].map(evaluateAcuteDiseaseScore);\r\n        }\r\n    });\r\n\r\n    // Timeline\r\n    var t = {\r\n        \"title\": \"Malnutrition Universal Screening Tool (MUST)\",\r\n        \"subtitle\": \"(scores)\",\r\n        // \"icon\": null,\r\n        measurements: tMeasurements,\r\n        measurementGroups: [ tmgWeight, tmgHeight, tmgBMI, tmgBMIscore, tmgWeightLoss, tmgWeightLossScore, tmgAcuteDiseaseScore ]\r\n    }\r\n\r\n    return t;\r\n}\r\n"}]}