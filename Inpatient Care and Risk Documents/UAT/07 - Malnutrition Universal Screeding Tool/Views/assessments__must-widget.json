{"name":"assessments::must-widget","category":"view","description":"MUST Assessment Widget","metaData":"{\r\n    \"parameters\": [\r\n        {\r\n            \"name\": \"ehrId\",\r\n            \"description\": \"Ehr id\",\r\n            \"type\": \"string\"\r\n        },\r\n      {\r\n          \"name\": \"dateFrom\",\r\n          \"type\": \"string\",\r\n          \"description\": \"Date From\"\r\n      }\r\n    ]\r\n}","steps":[{"processorName":"js","processorData":"// Assessments MUST Widget View v1.0.3\r\n// Template required: \"Malnutrition Universal Screening Tool\" v2.0.0\r\n//@vanessap: Updated to v1.0.2, removed unused aql paths, changed previous values section.\r\n//hw: updated to v1.0.3, return null if dateFrom not provided\r\n\r\nfunction compute(ctx, src)\r\n{\r\n    var promises = {\r\n        mustAssessment: Ehr.query({\r\n            aql: \"select\\n\"+\r\n            \"    a/context/start_time/value as dateCompositionSubmitted,\\n\"+\r\n            \"    a/composer/name as creator,\\n\"+\r\n            \"    a/composer/external_ref/id/value as creatorId,\\n\"+\r\n            \"    a_a/data[at0001]/events[at0002]/data[at0003]/items[at0015]/value/magnitude as mustTotalScore,\\n\"+\r\n            \"    a_a/data[at0001]/events[at0002]/data[at0003]/items[at0016]/value/value as mustRiskCategory,\\n\"+\r\n            \"    a/name/value as templateName,\\n\"+\r\n            \"    a/archetype_details/template_id/value as templateId,\\n\"+\r\n            \"    a/uid/value as compositionUid \\n\"+\r\n            \"from EHR e [ehr_id/value=:ehrId] \\n\"+\r\n            \"contains COMPOSITION a \\n\"+\r\n            \"contains OBSERVATION a_a[openEHR-EHR-OBSERVATION.must.v0] \\n\"+\r\n            \"where a/name/value='Malnutrition universal screening tool'\\n\"+\r\n            \"AND dateCompositionSubmitted > :dateFrom\\n\"+\r\n            \"order by dateCompositionSubmitted desc\\n\"+\r\n            \"limit 8\",\r\n            initvalue: [],\r\n            params: {\r\n              ehrId: ctx.vars.ehrId,\r\n              dateFrom: ctx.vars.dateFrom\r\n            },\r\n            callback: function(out, result) {\r\n                out.push(result);\r\n            }\r\n        })\r\n    };\r\n\r\n    function evaluate(assessment) {\r\n        var riskClass, riskText, referenceRange, sparklineLevel;\r\n        if (assessment.mustTotalScore === null || assessment.mustTotalScore === undefined) {\r\n            return null;\r\n        }\r\n        if (assessment.mustTotalScore <= 0) {\r\n            riskClass = \"lr\";\r\n            riskText = \"Low risk\";\r\n            referenceRange = '= 0';\r\n            sparklineLevel = 0;\r\n        } else if (assessment.mustTotalScore <= 1) {\r\n            riskClass = \"mr\";\r\n            riskText = \"Medium risk\";\r\n            referenceRange = '= 1';\r\n            sparklineLevel = 0;\r\n        } else {\r\n            riskClass = \"hr\";\r\n            riskText = \"High risk\";\r\n            referenceRange = '>= 2';\r\n            sparklineLevel = 0;\r\n        }\r\n\r\n        return {\r\n            'compositionUid': (assessment.compositionUid.split(\"::\"))[0],\r\n            'value': assessment.mustTotalScore,\r\n            'date': assessment.dateCompositionSubmitted,\r\n            'sparklineLevel': sparklineLevel,\r\n            'composer': assessment.creator,\r\n            // 'dateCreated': assessment.dateCompositionSubmitted,\r\n            // 'dateUpdated': assessment.dateTime,\r\n            'class': riskClass,\r\n            'riskText': riskText,\r\n            'referenceRange': referenceRange\r\n        };\r\n    }\r\n\r\n    var latestValue;\r\n    var historicValues = [];\r\nif(ctx.vars.dateFrom) {\r\n    Ehr.allhash(promises, function(res) {\r\n        if (res['mustAssessment'] == null || res['mustAssessment'].length == 0) {\r\n            latestValue = null;\r\n        } else {\r\n            latestValue = evaluate(res['mustAssessment'][0]);\r\n            // res['mustAssessment'].shift();\r\n            historicValues = res['mustAssessment'];\r\n            historicValues = historicValues.map(evaluate).slice(1, 6); // Wrap this in try-catch\r\n            historicValues.unshift(latestValue);\r\n        }\r\n    });\r\n\r\n}\r\n\r\n    var moreButtonUrl = null;\r\n    var clickUrl = null;\r\n    if (latestValue != null) {\r\n        moreButtonUrl = {\r\n            'path': 'timeline/assessments::must-timeline',\r\n            'navigationType': 'PORTAL'\r\n        };\r\n        clickUrl = {\r\n            'path': '' + latestValue.compositionUid,\r\n            'navigationType': 'PORTAL'\r\n        };\r\n    }\r\n\r\n\r\n    return latestValue ? {\r\n        'widgetType': 'RISK_STAGE',                 // RISK_STAGE | LIST_OF_FORMS | SINGLE_PARAMETER;\r\n        'riskStageType': 'SCORE',                   // SCORE | ASSESSMENT\r\n        'titleShort': 'MUST',\r\n        'titleLong': 'Malnutrition Universal Screening Tool',\r\n        'iconSrc': null,\r\n        'sparkline': {\r\n            levels: 1,\r\n            normalLevel: 0\r\n        },\r\n        'moreButtonUrl': moreButtonUrl,\r\n        'clickUrl': null,\r\n        'latestValue': latestValue,\r\n        'historicValues': historicValues\r\n    } : null;\r\n}\r\n"}]}